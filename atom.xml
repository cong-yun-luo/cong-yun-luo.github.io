<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落魄</title>
  
  <subtitle>若无闲事挂心头，便是人间好时节!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-28T02:50:56.522Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>congyun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>培训</title>
    <link href="http://example.com/posts/fb755569/"/>
    <id>http://example.com/posts/fb755569/</id>
    <published>2023-12-27T01:42:36.000Z</published>
    <updated>2023-12-28T02:50:56.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux复习"><a href="#linux复习" class="headerlink" title="linux复习"></a>linux复习</h1><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><p><strong>设计思想</strong></p><ol><li>小而专一：程序应该尽可能的小，且只专注于一件事</li><li>可移植性相对于性能更加重要：shell和perl , python等脚本相比c有更好的移植性;</li><li>一切介文件：尽量使用文本文件来存储数据，避免使用二进制文件</li><li>让每个程序都成为过滤器，程序需要与其他的工具一起配合使用，管道的支持是非常的重要的</li><li>任何的程序都需要考虑被批处理执行，尽量避免强制的用户交互或界面;</li></ol><p><strong>常见目录</strong></p><ul><li>boot：存放启动文件</li><li>dev：存放设备文件</li><li>etc：存放配置文件</li><li>home：普通用户的家目录，以&#x2F;home&#x2F;$username的形式存放</li><li>media：移动存储自动挂载目录，以&#x2F;media&#x2F;$device_name的方式存放</li><li>mnt：手动挂载目录</li><li>opt：第三方软件安装目录</li><li>proc：内存系统文件</li><li>root：管理员家目录</li><li>run：系统运行时需要的，不能随便删除，重启的时候抛弃，下次系统运行的时候重新生成</li><li>srv：服务相关数据</li><li>tmp：临时文件</li><li>usr：存放库文件、文档、命令、用户数据等</li><li>var：日志存放</li><li>lib：库文件</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>命令 [命令选项] [参数]</p><p><code>[]:可选项</code>、<code>&#123;&#125;：必选项</code></p><h3 id="命令分类"><a href="#命令分类" class="headerlink" title="命令分类"></a>命令分类</h3><p>内部命令（shell builtin）：内部命令是linux内部自带的，执行效率更高</p><p>外部命令（其他的内容）：需要安装以后才能够进行使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@congyun:/# type cd</span><br><span class="line">cd is a shell builtin</span><br><span class="line">root@congyun:/# type touch</span><br><span class="line">touch is /usr/bin/touch</span><br></pre></td></tr></table></figure><h3 id="命令位置"><a href="#命令位置" class="headerlink" title="命令位置"></a>命令位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/sbin</span><br><span class="line">/usr/local/bin</span><br><span class="line">/usr/sbin</span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><p><font color="red"><strong>区别：</strong></font>bin的命令任何人都可以使用，sbin的命令则称为特权命令，只有管理员可以使用</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>Usage: ls [OPTION]… [FILE]…</p><h4 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a><strong>清屏</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@congyun:/# clear --help</span><br><span class="line">clear: invalid option -- &#x27;-&#x27;</span><br><span class="line">Usage: clear [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -T TERM     use this instead of $TERM</span><br><span class="line">  -V          print curses-version</span><br><span class="line">  -x          do not try to clear scrollback</span><br></pre></td></tr></table></figure><ol><li><strong>-T TERM：</strong> 指定使用该选项后面指定的终端类型（TERM），而不是使用环境变量$TERM中指定的终端类型。</li><li><strong>-V：</strong> 打印curses库的版本信息。</li><li><strong>-x：</strong> 不尝试清除终端的滚动缓冲区（scrollback）。在某些终端中，当你向上滚动终端输出时，会显示之前的输出，这是通过终端的滚动缓冲区实现的。使用此选项后，<code>clear</code>命令将不会尝试清除滚动缓冲区。</li></ol><h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><p>man </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">MAN(1)                                                      手册分页显示工具                                                      MAN(1)</span><br><span class="line"></span><br><span class="line">名称</span><br><span class="line">       man - 系统参考手册的接口</span><br><span class="line"></span><br><span class="line">概述</span><br><span class="line">       man [man 选项] [[章节] 页 ...] ...</span><br><span class="line">       man -k [apropos 选项] 正则表达式 ...</span><br><span class="line">       man -K [man 选项] [章节] 关键词 ...</span><br><span class="line">       man -f [whatis 选项] 页 ...</span><br><span class="line">       man -l [man 选项] 文件 ...</span><br><span class="line">       man -w|-W [man 选项] page ...</span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">       man  是系统的手册分页程序。指定给 man 的 页 选项通常是程序、工具或函数名。程序将显示每一个找到的相关 手册页。如果指定了 章节，man</span><br><span class="line">       将只在手册的指定 章节 搜索。默认将按预定的顺序查找所有可用的 章节（参见 默认值 一节），并只显示找到的第一个 页，即使多个 章节  中</span><br><span class="line">       都有这个 页面。</span><br><span class="line"></span><br><span class="line">       下表显示了手册的 章节 号及其包含的手册页类型。</span><br><span class="line"></span><br><span class="line">       1   可执行程序或 shell 命令</span><br><span class="line">       2   系统调用(内核提供的函数)</span><br><span class="line">       3   库调用(程序库中的函数)</span><br><span class="line">       4   特殊文件(通常位于 /dev)</span><br><span class="line">       5   文件格式和规范，如  /etc/passwd</span><br><span class="line">       6   游戏</span><br><span class="line">       7   杂项（包括宏包和规范）， 如 man(7)，groff(7), man-pages(7)</span><br><span class="line">       8   系统管理命令(通常只针对 root 用户)</span><br><span class="line">       9   内核例程 [非标准</span><br><span class="line"></span><br><span class="line">       一个手册 页面 包含若干个小节。</span><br><span class="line"></span><br><span class="line">       小节名称通常包括   NAME,  概述(SYNOPSIS),  配置(CONFIGURATION),  描述(DESCRIPTION),  选项(OPTIONS),  退出状态(EXIT STATUS),  返回</span><br><span class="line">       值(RETURN VALUE), 错误(ERRORS), 环境(ENVIRONMENT), 文件(FILES), 版本(VERSIONS), 符合标准(CONFORMING TO),  注(NOTES),  缺陷(BUGS),</span><br><span class="line">       示例(EXAMPLE), 作者(AUTHORS), 和 亦见(SEE ALSO).</span><br><span class="line"></span><br><span class="line">       以下规范适用于 概述(SYNOPSIS) 小节，也可作为其他小节的指南。</span><br><span class="line"></span><br><span class="line">       加粗文本       按原样显示。</span><br><span class="line">       倾斜文本       用相应的参数进行替换。</span><br><span class="line">       [-abc]         “[ ]” 内的任意/全部参数都是可选的。</span><br><span class="line">       -a|-b          以“|”分隔的选项不可以一起使用。</span><br><span class="line">            参数 ...       参数 可以重复。</span><br><span class="line">       [表达式] ...   “[ ]”内的整个 表达式 可以重复。</span><br><span class="line"></span><br><span class="line">       实际渲染的效果可能因输出设备而异。例如，在终端中 man 程序通常无法渲染出斜体，这时一般会以下划线或彩色文字代替。</span><br><span class="line"></span><br><span class="line">       程序和函数说明应该是一个可以匹配所有可能用法的模式(pattern)。有些情况下，建议按此手册页 概述(SYNOPSIS) 小节所显示的分别陈述几种互</span><br><span class="line">       斥的用法。</span><br></pre></td></tr></table></figure><h4 id="切换文件夹目录"><a href="#切换文件夹目录" class="headerlink" title="切换文件夹目录"></a>切换文件夹目录</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       cd - 改变工作目录</span><br><span class="line"></span><br><span class="line">总览 SYNOPSIS</span><br><span class="line">       cd ?dirName?</span><br><span class="line">_________________________________________________________________</span><br><span class="line"></span><br><span class="line">描述 DESCRIPTION</span><br><span class="line">       把当前的工作目录改变成 dirName，如果没给出 dirName 就改变到主(home)目录(在 HOME 环境变量中指定)。返回一个空串。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd: cd [-L|[-P [-e]] [-@]] [dir]</span><br><span class="line">   改变工作目录</span><br><span class="line">    </span><br><span class="line">   切换当前工作目录到指定的目录 DIR。默认情况下，DIR 的值是 HOME 环境变量的值。</span><br><span class="line">   变量 CDPATH 定义了包含 DIR 的目录的搜索路径。在 CDPATH 中，用冒号（:）分隔的备选目录名称。</span><br><span class="line">   空目录名称等同于当前目录。如果 DIR 以斜杠（/）开头，那么不使用 CDPATH。</span><br><span class="line">   如果未找到目录，并且 shell 选项 `cdable_vars&#x27; 已设置，则假定该单词是一个变量名。如果该变量有一个值，那么将其值用作 DIR。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">   选项：</span><br><span class="line">      -L        强制跟随符号链接：在处理 `..` 实例之后解析 DIR 中的符号链接</span><br><span class="line">      -P        使用物理目录结构，而不跟随符号链接：在处理 `..` 实例之前解析 DIR 中的符号链接</span><br><span class="line">      -e        如果提供了 -P 选项，并且无法成功确定当前工作目录，则以非零状态退出</span><br><span class="line">      -@        在支持的系统上，将具有扩展属性的文件呈现为包含文件属性的目录</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="显示主机名"><a href="#显示主机名" class="headerlink" title="显示主机名"></a>显示主机名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">SYNOPSIS(总览)</span><br><span class="line">       hostname  [-v]  [-a] [--alias] [-d] [--domain] [-f] [--fqdn] [-i] [--ip-address] [--long] [-s] [--short] [-y] [--yp] [--nis] [-n]</span><br><span class="line">       [--node]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OPTIONS(选项)</span><br><span class="line">       -a,--alias</span><br><span class="line">              显示主机的别名(如果使用了的话).</span><br><span class="line"></span><br><span class="line">       -d,--domain</span><br><span class="line">              显示DNS域名.不要使用命令 domainname 来获得DNS域名,因为这会显示NIS域名而非DNS域名.可使用 dnsdomainname 替换之.</span><br><span class="line"></span><br><span class="line">       -F,--file filename</span><br><span class="line">              从指定文件中读取主机名.注释(以一个`#&#x27;开头的行)可忽略.</span><br><span class="line"></span><br><span class="line">       -f,--fqdn,--long</span><br><span class="line">              显示FQDN(完全资格域名).一个FQDN包括一个短格式主机名和DNS域名.除非你正在使用bind或             者NIS来作主机查询,否则你可以</span><br><span class="line">              在/etc/hosts文件中修改FQDN和DNS域名(这是FQDN的一 部分).</span><br><span class="line"></span><br><span class="line">       -h,--help</span><br><span class="line">              打印用法信息并退出.</span><br><span class="line"></span><br><span class="line">       -i,--ip-address</span><br><span class="line">              显示主机的IP地址(组).</span><br><span class="line"></span><br><span class="line">       -n,--node</span><br><span class="line">              显示DECnet节点名.如果指定了参数(或者指定了 --file name ),那么root也可以设置一个新的节点名.</span><br><span class="line"></span><br><span class="line">       -s,--short</span><br><span class="line">              显示短格式主机名.这是一个去掉第一个圆点后面部分的主机名.</span><br><span class="line"></span><br><span class="line">       -V,--version</span><br><span class="line">              在标准输出上打印版本信息并以成功的状态退出.</span><br><span class="line"></span><br><span class="line">       -v,--verbose</span><br><span class="line">              详尽说明并告知所正在执行的.</span><br><span class="line"></span><br><span class="line">       -y,--yp,--nis</span><br><span class="line">              显示NIS域名.如果指定了参数(或者指定了 --file name ),那么root也可以设置一个新的NIS域.</span><br></pre></td></tr></table></figure><p>显示当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PWD(1)                                                          用户命令                                                          PWD(1)</span><br><span class="line"></span><br><span class="line">名称</span><br><span class="line">       pwd - 显示出当前/活动目录的名称</span><br><span class="line"></span><br><span class="line">概述</span><br><span class="line">       pwd [选项]...</span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line">       输出当前工作目录的完整名称。</span><br><span class="line"></span><br><span class="line">       -L, --logical</span><br><span class="line">              使用环境变量中的 PWD，即使其中包含符号链接</span><br><span class="line"></span><br><span class="line">       -P, --physical</span><br><span class="line">              避免所有符号链接</span><br><span class="line"></span><br><span class="line">       --help 显示此帮助信息并退出</span><br><span class="line"></span><br><span class="line">       --version</span><br><span class="line">              显示版本信息并退出</span><br></pre></td></tr></table></figure><h4 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h4><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则 -l 参数会列出全部的信息名称。</li><li>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</li><li>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</li></ul><p>使用 kill -l 命令列出所有可用信号。</p><p>最常用的信号是：</p><ul><li>1 (HUP)：重新加载进程。</li><li>9 (KILL)：杀死一个进程。</li><li>15 (TERM)：正常停止一个进程。</li></ul><h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h2 id="githubDesktop的使用"><a href="#githubDesktop的使用" class="headerlink" title="githubDesktop的使用"></a>githubDesktop的使用</h2><ul><li>创建本地仓库</li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-1c2ab2-1703150241.png" alt="image-20231221171358344"></p><ul><li><strong>文件操作状态</strong></li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-c79639-1703150400.png" alt="image-20231221172000030"></p><ul><li><strong>将本地文件提交到仓库中</strong></li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-04f835-1703150467.png" alt="image-20231221172107941"></p><ul><li>文件提交后的版本号</li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-34838c-1703151288.png" alt="image-20231221173448882"></p><ul><li>创建分支</li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-036992-1703152334.png" alt="image-20231221175214104"></p><ul><li><strong>合并分支</strong></li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-610124-1703152607.png" alt="image-20231221175646999"></p><ul><li>冲突上传</li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-0002fd-1703152981.png" alt="image-20231221180301469"></p><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-d4f2ee-1703152971.png" alt="image-20231221180251475"></p><ul><li>标签：用于标记无提交备注的操作</li></ul><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-21-8458ab-1703153057.png" alt="image-20231221180417815"></p><h2 id="idea中git的使用"><a href="#idea中git的使用" class="headerlink" title="idea中git的使用"></a>idea中git的使用</h2><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Nginx-安装配置"><a href="#Nginx-安装配置" class="headerlink" title="Nginx 安装配置"></a>Nginx 安装配置</h2><p><a href="https://www.runoob.com/linux/nginx-install-setup.html">Nginx 安装配置 | 菜鸟教程 (runoob.com)</a></p><p>nginx编译的时候没有使用它的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + OpenSSL library is not used</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class="line">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</span><br><span class="line">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span><br><span class="line">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class="line">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span><br><span class="line">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span><br><span class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure><p>配置alisa快速切换目录到&#x2F;usr&#x2F;local&#x2F;nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim .bashrc</span><br><span class="line"><span class="built_in">alias</span> myNginx=<span class="string">&#x27;cd /usr/local/nginx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">myNginx</span><br><span class="line">cd sbin</span><br><span class="line"># 启动</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line"># 快速停止</span><br><span class="line">./nginx -s stop</span><br><span class="line"></span><br><span class="line"># 退出前完成已接收的连接请求</span><br><span class="line">./nginx -s quit</span><br><span class="line"></span><br><span class="line"># 重新加载配置</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="通过系统脚本的方式启动"><a href="#通过系统脚本的方式启动" class="headerlink" title="通过系统脚本的方式启动"></a>通过系统脚本的方式启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=NGINX HTTP 及反向代理服务器</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">ExecQuit=/usr/local/nginx/sbin/nginx -s quit</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl status nginx</span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="目录结构与运行原理"><a href="#目录结构与运行原理" class="headerlink" title="目录结构与运行原理"></a>目录结构与运行原理</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@congyun nginx]# ll</span><br><span class="line">total 36</span><br><span class="line">drwx------ 2 nobody root 4096 Dec 27 17:01 client_body_temp</span><br><span class="line">drwxr-xr-x 2 root   root 4096 Dec 27 16:42 conf</span><br><span class="line">drwx------ 2 nobody root 4096 Dec 27 17:01 fastcgi_temp</span><br><span class="line">drwxr-xr-x 2 root   root 4096 Dec 27 16:42 html</span><br><span class="line">drwxr-xr-x 2 root   root 4096 Dec 27 17:47 logs</span><br><span class="line">drwx------ 2 nobody root 4096 Dec 27 17:01 proxy_temp</span><br><span class="line">drwxr-xr-x 2 root   root 4096 Dec 27 16:42 sbin</span><br><span class="line">drwx------ 2 nobody root 4096 Dec 27 17:01 scgi_temp</span><br><span class="line">drwx------ 2 nobody root 4096 Dec 27 17:01 uwsgi_temp</span><br></pre></td></tr></table></figure><p>当涉及到 Nginx 的这些目录时，每个目录的具体用途如下：</p><ol><li><p><strong>client_body_temp:</strong></p><ul><li><strong>目的：</strong> 该目录用于存储与来自客户端的请求主体相关的临时文件，尤其是在处理 POST 请求时，其中客户端发送数据。</li><li><strong>示例用途：</strong> 当客户端上传文件或提交表单数据时，请求处理期间可能会在此处存储临时文件。</li></ul></li><li><p><strong>conf:</strong></p><ul><li><strong>目的：</strong> 该目录可能包含其他配置文件。这可能是您组织和存储各种 Nginx 配置片段的地方。</li><li><strong>示例用途：</strong> 您可以为不同的服务器块存储单独的配置文件，或者包含具有常见设置的文件。</li></ul></li><li><p><strong>fastcgi_temp:</strong></p><ul><li><strong>目的：</strong> 用于存储在处理 FastCGI 请求期间由 FastCGI 模块生成的临时文件。</li><li><strong>示例用途：</strong> 当 Nginx 与 FastCGI 后端通信时，与 FastCGI 处理相关的临时文件将存储在此目录中。</li></ul></li><li><p><strong>html:</strong></p><ul><li><strong>目的：</strong> 默认的静态 HTML 文件和网站其他资源的目录。</li><li><strong>示例用途：</strong> 您网站的 HTML 文件、图像、样式表和其他静态资源通常会放置在此目录中。</li></ul></li><li><p><strong>logs:</strong></p><ul><li><strong>目的：</strong> 存储 Nginx 日志文件，包括 <code>access.log</code> 和 <code>error.log</code>。</li><li><strong>示例用途：</strong> 记录有关传入请求、服务器响应和错误消息的信息。有助于故障排除和监控。</li></ul></li><li><p><strong>proxy_temp:</strong></p><ul><li><strong>目的：</strong> 用于存储在处理代理请求期间由代理模块生成的临时文件。</li><li><strong>示例用途：</strong> 当 Nginx 充当反向代理并将请求转发到后端服务器时，与代理处理相关的临时文件将存储在此目录中。</li></ul></li><li><p><strong>sbin:</strong></p><ul><li><strong>目的：</strong> 这可能是存放 Nginx 可执行文件（<code>nginx</code> 二进制文件）的位置。</li><li><strong>示例用途：</strong> 启动和管理 Nginx 服务器的实际二进制文件可能位于此目录中。</li></ul></li><li><p><strong>scgi_temp:</strong></p><ul><li><strong>目的：</strong> 用于存储在处理 SCGI 请求期间由 SCGI 模块生成的临时文件。</li><li><strong>示例用途：</strong> 在使用 SCGI 协议的情况下，与 SCGI 处理相关的临时文件将存储在此目录中。</li></ul></li><li><p><strong>uwsgi_temp:</strong></p><ul><li><strong>目的：</strong> 用于存储在处理 uWSGI 请求期间由 uWSGI 模块生成的临时文件。</li><li><strong>示例用途：</strong> 在 Nginx 与 uWSGI 通信的情景下，与 uWSGI 处理相关的临时文件将存储在此目录中。</li></ul></li></ol><p>这些目录主要用于存储在处理各种请求类型时生成的临时数据，例如代理、处理 FastCGI 或 SCGI 请求以及处理客户端请求主体。它们对于 Nginx 在生产环境中的正常运行是至关重要的。</p><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@congyun nginx]# ps -aux | grep nginx</span><br><span class="line">root       720  0.0  0.0  20988   620 ?        Ss   17:47   0:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">nobody     721  0.0  0.0  23516  1620 ?        S    17:47   0:00 nginx: worker process</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过ps -aux | grep nginx可以看到存在两个进程，<code>master</code>和<code>worker</code>。</p><p>当您启动 Nginx 可执行文件时，它会创建两种类型的进程：<code>master</code> 进程和 <code>worker</code> 进程。</p><ol><li><p><strong>主进程 (<code>master</code>):</strong></p><ul><li>主进程的主要责任是管理工作进程，并执行一些初始化操作，如读取配置文件。</li><li>它负责启动和监控多个 <code>worker</code> 进程，以便处理客户端请求。</li><li>主进程还执行配置文件的二次校验，确保配置的正确性。</li></ul></li><li><p><strong>工作进程 (<code>worker</code>):</strong></p><ul><li>每个 <code>worker</code> 进程是 Nginx 处理实际请求的执行者。</li><li><code>worker</code> 进程的数量由配置文件中的 <code>worker_processes</code> 指令指定。</li><li>每个 <code>worker</code> 进程独立地处理用户的请求，它们之间是并行运行的，提供高并发性能。</li></ul></li><li><p><strong>用户请求处理过程：</strong></p><ul><li>当用户发起请求时，主进程派发请求给可用的 <code>worker</code> 进程。</li><li><code>worker</code> 进程读取主配置文件（通常是 <code>/conf/nginx.conf</code>）和站点配置，了解如何处理特定请求。</li><li>根据配置，<code>worker</code> 进程可能会代理请求、处理静态文件，或将请求传递给后端服务。</li><li>每个 <code>worker</code> 进程都是独立的，可以处理多个请求，实现高性能和并发处理。</li></ul></li></ol><p>通过这种主从进程模型，Nginx 能够在一个主进程的控制下同时处理多个客户端请求，实现高效的请求处理和服务器性能。</p><p>这种设计使得 Nginx 成为处理高并发负载的理想选择。</p><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-12-27-a211e9-1703671886.png" alt="image-20231227181118215"></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ol><li><p><code>worker_processes</code>：工作的子进程数目，一般会对应到当前主机的物理CPU的内核数目</p></li><li><p>Nginx 中的 <code>events</code> 块，用于配置与事件相关的参数。具体而言，这里设置了 <code>worker_connections</code> 参数</p></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>events</code> 块：</strong><ul><li><code>events</code> 块用于配置与事件处理相关的参数，通常用于指定 worker 进程的一些行为。</li></ul></li><li><strong><code>worker_connections</code> 参数：</strong><ul><li><code>worker_connections</code> 参数定义了每个 <code>worker</code> 进程能够同时处理的最大连接数。</li><li>在这个例子中，设置为 <code>1024</code>，表示每个 worker 进程可以同时处理 1024 个并发连接。</li><li>这个数字是一个相对较小的默认值，因为 Nginx 的设计目标是高并发，而不是为单个连接提供非常大的并发能力。</li></ul></li></ul><ol start="3"><li>在 Nginx 的配置文件中，<code>include</code> 指令用于包含其他文件的内容。而 <code>mime.types</code> 文件是包含了 MIME 类型与文件扩展名之间的映射关系。该指令确保了在处理请求时，Nginx 能够正确地识别文件类型，设置适当的 MIME 类型，并在 HTTP 响应头中正确传递这些信息给客户端</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> mime.types;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>include</code> 指令：</strong></p><ul><li><code>include</code> 指令允许在配置文件中包含其他文件的内容。这是一种组织配置的方式，使得配置文件更为清晰和易于维护。</li></ul></li><li><p><strong><code>mime.types</code> 文件：</strong></p><ul><li><code>mime.types</code> 文件包含了 MIME 类型（Multipurpose Internet Mail Extensions）与文件扩展名之间的映射关系。MIME 类型描述了文件的性质和用途，例如，指定某个文件是文本文件还是图像文件。</li><li>通过包含 <code>mime.types</code> 文件，Nginx 可以知道如何处理不同类型的文件，特别是在设置 HTTP 响应头时，确保浏览器正确地解释服务器发送的文件。</li></ul></li><li><p><strong>作用：</strong></p><ul><li><code>include mime.types;</code> 的作用是在 Nginx 配置中引入 <code>mime.types</code> 文件的内容，以便服务器能够理解文件的 MIME 类型。这是配置静态文件处理时常见的操作。</li></ul></li><li><p><strong>自定义 MIME 类型：</strong></p><ul><li>如果您有特定的文件类型需要自定义 MIME 类型，您可以在 <code>mime.types</code> 文件中进行修改或在配置文件中手动添加新的 MIME 类型。</li></ul></li></ul><ol start="4"><li><code>default_type</code> 是 Nginx 配置中的一个指令，用于设置默认的 MIME 类型。在以下的配置中：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">default_type</span> application/octet-stream;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>default_type</code> 指令：</strong></p><ul><li><code>default_type</code> 用于指定在无法确定文件的 MIME 类型时使用的默认 MIME 类型。</li></ul></li><li><p><strong><code>application/octet-stream</code>：</strong></p><ul><li>在这个例子中，将默认的 MIME 类型设置为 <code>application/octet-stream</code>。这是一个通用的二进制文件类型，表示未知的文件类型或不可识别的文件。</li></ul></li><li><p><strong>作用：</strong></p><ul><li>当 Nginx 无法从文件扩展名或其他方式确定文件的准确 MIME 类型时，它将使用 <code>application/octet-stream</code> 作为默认 MIME 类型。这对于二进制文件或无法分类的文件是一种合适的默认值。</li></ul></li><li><p><strong>示例情况：</strong></p><ul><li>如果客户端请求一个没有明确 MIME 类型的文件，或者服务器无法通过文件扩展名等信息确定文件类型时，服务器将使用 <code>application/octet-stream</code> 作为默认的 MIME 类型。这通常会导致浏览器将文件下载而不是尝试在浏览器中渲染它。</li></ul></li></ul><p>这个指令确保了在无法确定文件类型时，Nginx 提供了一个合理的默认值，以防止浏览器尝试渲染不支持的内容类型</p><ol start="5"><li><code>sendfile</code> 是 Nginx 配置中的一个指令，用于控制是否启用操作系统提供的 <code>sendfile</code> 系统调用来传输文件的内容。在以下的配置中：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>sendfile</code> 指令：</strong></p><ul><li><code>sendfile</code> 指令用于启用或禁用操作系统提供的 <code>sendfile</code> 系统调用。这个系统调用允许直接在内核空间中进行文件传输，提高文件传输的效率。</li></ul></li><li><p><strong><code>on</code>：</strong></p><ul><li>在这个例子中，<code>on</code> 表示启用 <code>sendfile</code> 系统调用。</li></ul></li><li><p><strong>作用：</strong></p><ul><li>当启用 <code>sendfile</code> 时，Nginx 将尝试使用操作系统提供的 <code>sendfile</code> 功能来直接将文件从磁盘传输到网络，而无需在用户空间中进行不必要的拷贝。</li></ul></li><li><p><strong>性能优势：</strong></p><ul><li><code>sendfile</code> 的启用通常可以提高文件传输的性能，特别是对于大文件。因为它允许操作系统在内核层面进行数据传输，减少了用户空间和内核空间之间的数据复制。</li></ul></li><li><p><strong>示例情况：</strong></p><ul><li>启用 <code>sendfile</code> 是推荐的配置，特别是在高负载和大文件传输的环境中。然而，对于某些特殊情况，可能需要禁用 <code>sendfile</code>，例如在某些虚拟化环境中可能会出现问题。</li></ul></li></ul><ol start="6"><li><code>keepalive_timeout</code> 是 Nginx 配置中的一个指令，用于设置客户端和服务器之间的 HTTP 连接的保持时间。在以下的配置中：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>keepalive_timeout</code> 指令：</strong></p><ul><li><code>keepalive_timeout</code> 用于定义客户端和服务器之间的 HTTP 连接保持时间。它指定了在一个持久连接上没有活动时，连接会保持多长时间。</li></ul></li><li><p><strong><code>65</code>：</strong></p><ul><li>在这个例子中，<code>65</code> 表示连接的保持时间为 65 秒。</li></ul></li><li><p><strong>作用：</strong></p><ul><li>当启用 HTTP Keep-Alive（持久连接）时，<code>keepalive_timeout</code> 控制一个持久连接的空闲时间。如果在指定的时间内没有新的请求到达，连接将被关闭。</li></ul></li><li><p><strong>性能优势：</strong></p><ul><li>使用 Keep-Alive 可以减少建立和关闭连接的开销，因为客户端和服务器之间的连接可以被重复使用，而不必每次都重新建立。</li></ul></li><li><p><strong>示例情况：</strong></p><ul><li>在高流量的网站上，启用 Keep-Alive 并设置适当的 <code>keepalive_timeout</code> 可以显著减少连接的开销，提高性能。较短的超时值可能适用于需要更频繁释放连接的环境。</li></ul></li></ul><ol start="7"><li><code>server</code> 块是用于定义虚拟主机（Virtual Host）或服务器的主要部分。每个 <code>server</code> 块描述了对特定主机名或 IP 地址、端口的监听，并配置了该主机的行为。一个<code>server</code>代表一个虚拟主机。</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>listen 80;</code>：</strong></p><ul><li><code>listen</code> 指令用于指定服务器监听的端口。这里表示 Nginx 服务器将监听在 80 端口上。</li></ul></li><li><p><strong><code>server_name localhost;</code>：</strong></p><ul><li><code>server_name</code> 指令用于指定服务器的域名&#x2F;主机名。在这里，服务器会响应 <code>localhost</code> 这个域名的请求。</li></ul></li><li><p><strong><code>location / &#123; ... &#125;</code>：</strong></p><ul><li><code>location</code> 块用于配置请求匹配特定路径时的行为。</li><li>当请求路径匹配 <code>/</code> 时，Nginx 将使用指定的 <code>root</code> 目录和 <code>index</code> 文件来处理请求。</li></ul></li><li><p><strong><code>root html;</code>：</strong></p><ul><li><code>root</code> 指令用于指定网站文件的根目录。在这个例子中，使用相对路径 <code>html</code> 表示网站文件存放在配置文件所在目录下的 <code>html</code> 子目录。</li></ul></li><li><p><strong><code>index index.html index.htm;</code>：</strong></p><ul><li><code>index</code> 指令用于指定默认的索引文件，即当访问一个目录时，默认会查找的文件。</li><li>在这里，当访问路径匹配时，Nginx 将尝试查找并返回 <code>index.html</code> 或 <code>index.htm</code>。</li></ul></li><li><p><strong><code>error_page 500 502 503 504 /50x.html;</code>：</strong></p><ul><li><code>error_page</code> 指令用于配置指定状态码的错误页面。</li><li>在这里，当发生 500、502、503、504 状态码的错误时，Nginx 将重定向到 <code>/50x.html</code>。</li></ul></li><li><p><strong><code>location = /50x.html &#123; ... &#125;</code>：</strong></p><ul><li>这个 <code>location</code> 块指定了对 <code>/50x.html</code> 路径的处理。</li><li>使用 <code>root html;</code> 表示该错误页面文件存放在配置文件所在目录下的 <code>html</code> 子目录。</li></ul></li></ul><p>这个配置文件定义了一个简单的 Nginx 服务器，监听在 80 端口上，处理了根路径 <code>/</code> 的请求，设置了默认的索引文件，以及定义了处理特定状态码的错误页面。</p><h2 id="虚拟主机和域名解析"><a href="#虚拟主机和域名解析" class="headerlink" title="虚拟主机和域名解析"></a>虚拟主机和域名解析</h2><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>虚拟主机（Virtual Host）：在一台物理主机上同时托管多个域名或者主机名。虚拟主机允许一台服务器表现的像多台服务器一样，<font color="red"><strong>每个虚拟主机拥有自己独立的配置、文档根目录、日志等</strong></font>，使得多个网站可以共享一台服务器的资源。</p><p>在 Nginx 中，虚拟主机通过配置不同的 <code>server</code> 块来实现，每个 <code>server</code> 块对应一个虚拟主机，用于处理特定的域名或 IP 地址的请求。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nginxCopy</span> codeserver &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.example.com;  <span class="comment"># 域名配置</span></span><br><span class="line">    <span class="attribute">root</span> /path/to/www/example;    <span class="comment"># 网站根目录</span></span><br><span class="line">    <span class="comment"># 其他配置项...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中的 <code>server</code> 块表示一个虚拟主机，它监听在 80 端口，对应的域名是 <code>www.example.com</code>，并定义了网站的根目录等配置</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名解析是将域名映射到相应 IP 地址的过程，这通常是通过 DNS 来完成的。在 Nginx 的虚拟主机配置中，域名解析的正确性对于客户端能够正确连接到服务器至关重要。</p><ul><li>DNS 配置示例：<ul><li>如果将 <code>www.example.com</code> 的域名解析配置为指向服务器的 IP 地址，那么当用户在浏览器中输入 <code>www.example.com</code> 时，DNS 将返回服务器的 IP 地址。</li></ul></li></ul><p><strong>虚拟主机和域名解析的关系</strong>：</p><ul><li>Nginx 允许配置多个 <code>server</code> 块，每个 <code>server</code> 块可以处理不同的域名或 IP 地址。这样，同一台服务器可以为多个域名提供服务，每个域名有独立的配置和内容。</li><li>在一台服务器上绑定了不同的域名，但最终解析到的 IP 地址相同的情况下，通过 Nginx 中的不同配置的虚拟主机（<code>server</code> 块）来实现不同服务地址的区分</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux复习&quot;&gt;&lt;a href=&quot;#linux复习&quot; class=&quot;headerlink&quot; title=&quot;linux复习&quot;&gt;&lt;/a&gt;linux复习&lt;/h1&gt;&lt;h2 id=&quot;目录介绍&quot;&gt;&lt;a href=&quot;#目录介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>复习</title>
    <link href="http://example.com/posts/20e5b247/"/>
    <id>http://example.com/posts/20e5b247/</id>
    <published>2023-11-11T14:17:16.000Z</published>
    <updated>2023-12-28T02:48:19.761Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="http://example.com/posts/bce68613/"/>
    <id>http://example.com/posts/bce68613/</id>
    <published>2023-09-21T14:00:00.000Z</published>
    <updated>2023-09-27T14:29:48.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>MySQL：是一个<strong>关系型数据库（RDBMS）</strong></p><p><code>关系型数据库</code></p><p>建立在关系模型的基础上，由多张相互连接的二维表组成的数据库</p><p><strong>关系模型</strong>：<br>     1. 是一种数据组织和管理方法，使用<strong>表格来表示数据</strong><br>     2. 每个表格都有一个名称，用于描述表格中存储的数据类型和结构</p><p><strong>二维表指</strong>：</p><pre><code> 1. 每一个二维表都是一个矩形表格，由**行和列**组成 2. 每行表示一个数据记录，也成为元祖（tuple） 3. 每列代表一个属性或者字段（attribute） 4. 属性具有预定义的数据类型，例如整数、字符、日期等 5. 每个表格中的每个元素都是单一的数据值</code></pre><p><strong>优点</strong></p><ol><li><p>使用表存储数据，格式统一，便于维护</p></li><li><p>使用SQL语言操作，标准统一，使用方便</p></li></ol><p><strong>数据模型</strong></p><p>​用于描述数据的组织、结构、关系和操作方式，以便在计算机系统中存储、管理和访问数据</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ol><li>SQL语句可以<strong>单行或者多行书写</strong>，以<strong>分号结尾</strong></li><li>SQL语句可以使用空格&#x2F;缩进来增强语句的可读性</li><li>MySQL数据库中的SQL语句不区分大小写，<strong>关键字建议使用大写</strong></li><li>注释<ol><li>单行注释：—或者#</li><li>多行注释：&#x2F;**&#x2F;</li></ol></li></ol><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象（数据库、表、字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行<strong>增删改查</strong></td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCl</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="查询-数据库操作"><a href="#查询-数据库操作" class="headerlink" title="查询-数据库操作"></a>查询-数据库操作</h4><p>查询所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>查询当前数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database [if not exists] 数据库名 [Default Charsert 字符集] [COLLATE 排序规则]</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database [if exists] 数据库名;</span><br></pre></td></tr></table></figure><p>使用数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h4 id="查询-数据库表操作"><a href="#查询-数据库表操作" class="headerlink" title="查询-数据库表操作"></a>查询-数据库表操作</h4><p>查询当前数据库所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><p>查询指定表的建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure><p>创建数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    字段 字段类型 [comment &#x27;字段注释&#x27;],</span><br><span class="line">    字段 字段类型 [comment &#x27;字段注释]&#x27;&#x27;,</span><br><span class="line">    字段 字段类型 [comment &#x27;字段注释&#x27;],</span><br><span class="line">    ......</span><br><span class="line">    字段 字段类型 [comment &#x27;字段注释&#x27;]</span><br><span class="line">)[comment 表注释];</span><br></pre></td></tr></table></figure><p><strong><font color="red">[…]为可选参数，最后一个字段后面没有逗号</font></strong></p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>MySQL中的数据类型：数值类型、字符串类型、日期时间类型</p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>大小</strong></th><th align="center"><strong>有符号(signed)范围</strong></th><th align="center"><strong>无有符号(unsigned)范围</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">tinyint</td><td align="center">1 byte</td><td align="center">(-128，127)</td><td align="center">(0，255)</td><td align="center">小整数值</td></tr><tr><td align="center">smallint</td><td align="center">2 byte</td><td align="center">(-32768，32767)</td><td align="center">(0，65535)</td><td align="center">大整数值</td></tr><tr><td align="center">mediumint</td><td align="center">3 byte</td><td align="center">(-8388608，8388607)</td><td align="center">(0，16777215)</td><td align="center">大整数值</td></tr><tr><td align="center">int或者integer</td><td align="center">4 byte</td><td align="center">(-2147483648，2147483647)</td><td align="center">(0，4294967295)</td><td align="center">大整数值</td></tr><tr><td align="center">bigint</td><td align="center">8 byte</td><td align="center">($-2^{63}$,$2^{63}-1$)</td><td align="center">(0，$2^{64}-1$)</td><td align="center">极大整数值</td></tr><tr><td align="center">float</td><td align="center">4 byte</td><td align="center">(-3.402823466E+38，3.402823466351 E+38)</td><td align="center">0和(1.175494351 E-38,3.402823466E+38)</td><td align="center">单精度浮点数</td></tr><tr><td align="center">double</td><td align="center">8 byte</td><td align="center">(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td align="center">0和(2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td align="center">双精度浮点数</td></tr><tr><td align="center">decimal</td><td align="center"></td><td align="center">依赖于M（精度）和D（标度）的值</td><td align="center">依赖于M(精度)和D(标度)的值</td><td align="center">小数值（精确定点数）·</td></tr></tbody></table><p><code>ps</code></p><ol><li>精度：整个数字的长度</li><li>标度：小数点后面的位数</li><li>关于double的参数说明：double(arg1,arg2)，arg1代表整体的长度，arg2代表小数点后的位数</li></ol><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>大小</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">char</td><td align="center">0-255 bytes</td><td align="center">定长字符串</td></tr><tr><td align="center">varchar</td><td align="center">0-65535 bytes</td><td align="center">变长字符串</td></tr><tr><td align="center">tinychar</td><td align="center">0-255 bytes</td><td align="center">不超过255个字符的二进制数据</td></tr><tr><td align="center">blob</td><td align="center">0-255 bytes</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">text</td><td align="center">0-65535 bytes</td><td align="center">长文本数据</td></tr><tr><td align="center">mediumblob</td><td align="center">0-65535 bytes</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">mediumtext</td><td align="center">0-16 777 215 bytes</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">longblob</td><td align="center">0-16 777 215 bytes</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">longtxt</td><td align="center">0-4 294 967 295 bytes</td><td align="center">极大文本数据</td></tr></tbody></table><p><font color="red"><strong>char和varchar的区分</strong></font></p><ol><li>char(number)：定长字符串，即使只存储一个字符，也会占据number个空间，未占用的空间用<strong>空格</strong>补位，性能好</li><li>varchar(number)：存储几个字符，就占用几个空间，<strong>根据存储的内容计算占用的空间</strong>，性能相对较差</li></ol><h5 id="时间日期类型"><a href="#时间日期类型" class="headerlink" title="时间日期类型"></a>时间日期类型</h5><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>大小</strong></th><th align="center"><strong>范围</strong></th><th align="center"><strong>格式</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">date</td><td align="center">3</td><td align="center">1000-01-01 至9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">time</td><td align="center">3</td><td align="center">-838:59:59 至838:59:59</td><td align="center">HH:MM:SS</td><td align="center">时间值或者持续时间</td></tr><tr><td align="center">year</td><td align="center">1</td><td align="center">1901 至 2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td align="center">datetime</td><td align="center">8</td><td align="center">1000-01-01 00:00:00至 9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr><tr><td align="center">timestamp</td><td align="center">4</td><td align="center">1970-01-01 00:00:01 至2038-01-19 03:14:07</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值，时间戳</td></tr></tbody></table><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">根据需求创建表(设计合理的数据类型、长度)</span><br><span class="line">设计一张员工信息表，要求如下:</span><br><span class="line">1．编号（纯数字)</span><br><span class="line">2. 员工工号(字符串类型，长度不超过10位)</span><br><span class="line">3. 员工姓名（字符串类型，长度不超过10位)</span><br><span class="line">4．性别(男/女，存储一个汉字)</span><br><span class="line">5. 年龄（正常人年龄，不可能存储负数)</span><br><span class="line">6. 身份证号（二代身份证号均为18位，身份证中有X这样的字符)</span><br><span class="line">7. 入职时间（取值年月日即可)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE people(</span><br><span class="line">id INTEGER COMMENT &#x27;员工编号&#x27;,</span><br><span class="line">pid VARCHAR(10) COMMENT &#x27;员工工号&#x27;,</span><br><span class="line">pname VARCHAR(10) COMMENT &#x27;员工姓名&#x27;,</span><br><span class="line">psex char(2) COMMENT &quot;性别&quot;,</span><br><span class="line">page TINYINT UNSIGNED COMMENT &#x27;员工年龄&#x27;,</span><br><span class="line">pcardid char(18) COMMENT &#x27;员工身份证号码&#x27;,</span><br><span class="line">pintime date COMMENT &quot;员工入职时间&quot;</span><br><span class="line">) COMMENT &#x27;员工信息表&#x27;;</span><br></pre></td></tr></table></figure><h4 id="表操作-修改"><a href="#表操作-修改" class="headerlink" title="表操作-修改"></a>表操作-修改</h4><p>添加字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];</span><br></pre></td></tr></table></figure><p>案例：为people表增加一个新的字段“昵称”为nickname，类型为varchar(20)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table people add nickname varchar(20) comment &quot;昵称&quot;;</span><br></pre></td></tr></table></figure><p>修改数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify 字段名 新数据类型(长度);</span><br></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];</span><br></pre></td></tr></table></figure><p>案例：将people表的nickname字段修改为username，类型为varchar(30)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table people change nickname username varchar(30);</span><br></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop 字段名;</span><br></pre></td></tr></table></figure><p>案例：将people表的username字段删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table people drop username;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 rename to 新表名;</span><br></pre></td></tr></table></figure><p>案例：将people表的表名修改为employee</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table people rename to employee;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table [if exists] 表名;</span><br></pre></td></tr></table></figure><p>删除指定表，并重新创建该表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>在删除表的时候，表中的全部数据也会被删除</strong></font></p><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><h4 id="增加数据（insert）"><a href="#增加数据（insert）" class="headerlink" title="增加数据（insert）"></a>增加数据（insert）</h4><p>给指定字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (字段名1,字段名2,......) values (值1,值2,......);</span><br></pre></td></tr></table></figure><p>给全部字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 values (值1,值2,......);</span><br></pre></td></tr></table></figure><p>批量添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (字段名1,字段名2,......) values (值1,值2,......),(值1,值2,......),(值1,值2,......);</span><br><span class="line">insert into 表名 values (值1,值2,......),(值1,值2,......),(值1,值2,......);</span><br></pre></td></tr></table></figure><ol><li>在插入数据的时候，指定的字段顺序应该与值的顺序一一对应</li><li><strong>字符串和日期型数据</strong>应该包含在<strong>引号</strong>中</li><li>插入的数据大小，应该在字段的规定值内</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into people (id, pid, pname, psex, page, pcardid, pintime) values(2,&quot;2&quot;,&quot;test1&quot;,&quot;w&quot;,31,&quot;330200200202020202&quot;,&#x27;2020-02-11&#x27;);</span><br></pre></td></tr></table></figure><h4 id="修改数据（update）"><a href="#修改数据（update）" class="headerlink" title="修改数据（update）"></a>修改数据（update）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 字段名1 = 值1,字段名2 = 值2, ....... [where 条件];</span><br></pre></td></tr></table></figure><p><strong><font color="red">注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据</font></strong></p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 修改id为1的数据，将pname修改为congyun</span><br><span class="line"># 修改id为1的数据，将name修改为yujian, psex 修改为w</span><br><span class="line"># 将所有的员工入职日期修改为2008-01-01</span><br><span class="line">update people set pname = &#x27;congyun&#x27; where id = 1;</span><br><span class="line">update people set pname = &#x27;yujian&#x27;,psex = &#x27;w&#x27; where id = 1;</span><br><span class="line">update people set pintime = &#x27;2008-01-01&#x27;;</span><br></pre></td></tr></table></figure><h4 id="删除数据（delete）"><a href="#删除数据（delete）" class="headerlink" title="删除数据（delete）"></a>删除数据（delete）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 [where 条件];</span><br></pre></td></tr></table></figure><p><strong><font color="red">注意：</font></strong></p><p><strong><font color="red">1. delete语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</font></strong></p><p><strong><font color="red">2. delete语句不能删除某一个字段的值（可以使用update将其置为空）</font></strong></p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除姓名为yujian的员工</span><br><span class="line"># 删除所有员工</span><br><span class="line">delete from people where pname = &quot;yujian&quot;;</span><br><span class="line">delete from people;</span><br></pre></td></tr></table></figure><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名列表 where 条件列表 group by 分组字段列表 having 分组后条件列表 order by 排序字段列表 limt 分页参数;</span><br></pre></td></tr></table></figure><h4 id="基本查询查询多个字段"><a href="#基本查询查询多个字段" class="headerlink" title="基本查询查询多个字段"></a>基本查询<strong>查询多个字段</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 字段1,字段2,... from 表名;</span><br><span class="line">select * from 表名;</span><br></pre></td></tr></table></figure><p><strong>设置别名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1 [as 别名1],字段2 [as 别名2],... from 表名;</span><br></pre></td></tr></table></figure><p><strong>去除重复记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct 字段列表 from 表名;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 1．查询指定字段name,workng,age返回</span><br><span class="line"># 2．查询所有字段返回</span><br><span class="line"># 3．查询所有员工的工作地址,起别名</span><br><span class="line"># 4．查询公司员工的上班地址(不要重复)</span><br><span class="line"></span><br><span class="line">select name , workno, age from employee;</span><br><span class="line">select * from employee;</span><br><span class="line">select name as &quot;员工姓名&quot;, workaddress as &quot;工作地址&quot; from employee;</span><br><span class="line">select distinct workaddress as &quot;工作地址&quot;  from employee;</span><br></pre></td></tr></table></figure><h4 id="条件查询（WHERE"><a href="#条件查询（WHERE" class="headerlink" title="条件查询（WHERE)"></a>条件查询（WHERE)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 where 条件列表;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>比较运算符</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;&gt;或者!&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">between … and …</td><td align="center">在某个范围之内（含最小、最大值）</td></tr><tr><td align="center">in(…)</td><td align="center">在in之后的列表中的值，多选一</td></tr><tr><td align="center">like 占位符</td><td align="center">模糊匹配（**<font color="red">_</font><strong>匹配单个字符，</strong><font color="red">%</font>**匹配任意个字符）</td></tr><tr><td align="center">is null</td><td align="center">是null</td></tr></tbody></table><table><thead><tr><th align="center"><strong>逻辑运算符</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">and 或 &amp;&amp;</td><td align="center">并且（多个条件同时成立）</td></tr><tr><td align="center">or 或 ||</td><td align="center">或者（多个条件任意一个成立）</td></tr><tr><td align="center">not 或 !</td><td align="center">非，不是</td></tr></tbody></table><p><strong><font color="red">in的功能类似于</font>或</strong></p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 1. 查询年龄等于88的员工</span><br><span class="line"># 2. 查询年龄小于20的员工信息</span><br><span class="line"># 3. 查询年龄小于等于20的员工信息</span><br><span class="line"># 4. 查询没有身份证好的员工信息</span><br><span class="line"># 5. 查询有身份证号的员工信息</span><br><span class="line"># 6. 查询年龄不等于88的员工信息</span><br><span class="line"># 7. 查询年龄在15岁(包含)到20岁(包含)之间的员工信息</span><br><span class="line"># 8. 查询性别为女且年龄小于25岁的员工信息</span><br><span class="line"># 9. 查询年龄等于18 或20或40的员工信息</span><br><span class="line"># 10. 查询姓名为两个字的员工信息</span><br><span class="line"></span><br><span class="line">select * from employee where age = 88;</span><br><span class="line">select * from employee where age &lt; 20;</span><br><span class="line">select * from employee where age &lt;= 20;</span><br><span class="line">select * from employee where idcard is null;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">select * from employee where age != 88;</span><br><span class="line">select * from employee where age between 15 and 20;</span><br><span class="line">select * from employee where gender = &quot;女&quot; and  age &lt; 25;</span><br><span class="line">select * from employee where age = 18 || employee.age = 20 || employee.age = 40;</span><br><span class="line">select * from employee where age in(18,20,40);</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">select * from employee where employee.idcard like &#x27;%X&#x27;;</span><br><span class="line">select * from employee where employee.idcard like &#x27;_________________X&#x27;;</span><br></pre></td></tr></table></figure><h4 id="聚合函数（count、max、min、avg、sum）"><a href="#聚合函数（count、max、min、avg、sum）" class="headerlink" title="聚合函数（count、max、min、avg、sum）"></a>聚合函数（count、max、min、avg、sum）</h4><p><strong>聚合函数就是将一列数据作为一个整体，进行纵向计算</strong></p><table><thead><tr><th align="center"><strong>函数</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 聚合函数(字段列表) from 表名;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 1. 统计该企业员工数量</span><br><span class="line"># 2. 统计该企业员工的平均年龄</span><br><span class="line"># 3. 统计该企业员工的最大年龄</span><br><span class="line"># 4. 统计该企业员工的最小年龄</span><br><span class="line"># 5. 统计西安地区的员工年龄之和</span><br><span class="line"></span><br><span class="line">select count(*) from employee;</span><br><span class="line"></span><br><span class="line">select avg(age) from employee;</span><br><span class="line"></span><br><span class="line">select max(age) from employee;</span><br><span class="line"></span><br><span class="line">select min(age) from employee;</span><br><span class="line"></span><br><span class="line">select sum(age) from employee where workaddress = &#x27;西安&#x27;;</span><br></pre></td></tr></table></figure><p><strong><font color="red">所有的NULL值在聚合函数中是不参与计算的</font></strong></p><h4 id="分组查询（GROUP-BY"><a href="#分组查询（GROUP-BY" class="headerlink" title="分组查询（GROUP BY)"></a>分组查询（GROUP BY)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];</span><br></pre></td></tr></table></figure><p><strong>having 和 where的区别</strong></p><ol><li>执行时机不同<ol><li>where是<strong>分组之前</strong>进行过滤，<strong>不满足where条件，不参与分组</strong>；</li><li>having是<strong>分组之后</strong>对结果进行分组</li></ol></li><li>判断条件不同<ol><li>where<strong>不能对聚合函数</strong>进行判断</li><li>having<strong>可以对聚合函数</strong>进行判断</li></ol></li></ol><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1. 根据性别分组，统计男性员工和女性员工的数量</span><br><span class="line"># 2. 根据性别分组，统计男性员工和女性员工的平均年龄</span><br><span class="line"># 3. 查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line"> </span><br><span class="line">select  gender as &#x27;性别&#x27;,count(*) as &quot;人数&quot; from employee group by gender;</span><br><span class="line"></span><br><span class="line">select gender,avg(age) from employee group by gender;</span><br><span class="line"></span><br><span class="line">select workaddress,count(*) from employee where age &lt; 45 group by workaddress having count(workaddress) &gt;=3;</span><br><span class="line">select workaddress,count(*) as &#x27;tmp&#x27; from employee where age &lt; 45 group by workaddress having tmp &gt;=3;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意：</strong></font></p><ol><li><font color="red"><strong>分组查询的时候先查询where操作，然后根据where操作的结果进行聚合，最后在根据聚合的结果进行分类查找</strong></font>，<strong>即执行顺序为：where&gt;group by &gt; having</strong></li><li><strong>分组之后</strong>，查询的字段一般为<font color="red"><strong>聚合函数和分组字段</strong></font>，<strong>查询其余字段无任何意义</strong></li></ol><h4 id="排序查询（ORDER-BY"><a href="#排序查询（ORDER-BY" class="headerlink" title="排序查询（ORDER BY)"></a>排序查询（ORDER BY)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from order by 字段1 排序方式1,字段2 排序方式2, ......;</span><br></pre></td></tr></table></figure><p><strong>排序方式：</strong></p><ol><li><strong>ASC：升序（默认）</strong></li><li><strong>DESC：降序</strong></li></ol><p><font color="red"><strong>注意：如果是多字段排序，当第一个字段值相同的时候，才根据第二个字段进行排序</strong></font></p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 1. 根据年龄对公司的员工进行升序排序</span><br><span class="line"># 2. 根据入职时间，对员工进行降序排序</span><br><span class="line"># 3. 根据年龄对公司的员工进行升序排序，年龄相同，再按照入职时间进行降序排序</span><br><span class="line"></span><br><span class="line">select name,age,entrydate from employee order by age;</span><br><span class="line"></span><br><span class="line">select name,age,entrydate from employee order by entrydate desc ;</span><br><span class="line"></span><br><span class="line">select name,age,entrydate from employee order by age, entrydate desc ;</span><br></pre></td></tr></table></figure><h4 id="分页查询（LIMIT"><a href="#分页查询（LIMIT" class="headerlink" title="分页查询（LIMIT)"></a>分页查询（LIMIT)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表名 limit 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意：</strong></font></p><ol><li><strong><font color="red">起始索引从0开始，$起始索引 &#x3D; (查询页码 - 1) * 每页显示记录数$ </font></strong></li><li><font color="red"><strong>分页查询是数据库的方言，不同的数据库有不同的实现，MySql中是limit</strong></font></li><li><font color="red"><strong>如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10</strong></font></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1. 查询第1页员工数据，每页展示10条记录</span><br><span class="line"># 2. 查询第2页员工数据，每页展示10条记录</span><br><span class="line">select * from employee limit 10;</span><br><span class="line">select * from employee limit 10,10;</span><br></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 1. 查询年龄为20,21,22,23梦的员工信息。</span><br><span class="line"># 2. 查询性别为男，并且年龄在20-40岁(含)以内的姓名为三个字的员工。</span><br><span class="line"># 3. 统计员工表中，年龄小于60岁的，男性员工和女性员工的人数。</span><br><span class="line"># 4. 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</span><br><span class="line"># 5. 查询性别为男，且年龄在20-40岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序。</span><br><span class="line"></span><br><span class="line">select * from employee where age between 20 and 23 &amp;&amp; gender = &#x27;女&#x27;;</span><br><span class="line">select * from employee where age in(20,21,22,23) &amp;&amp; gender = &#x27;女&#x27;;</span><br><span class="line">select * from employee where age &gt;=20 &amp;&amp; employee.age &lt;=23 &amp;&amp; gender = &#x27;女&#x27;;</span><br><span class="line"></span><br><span class="line">select * from employee where gender = &#x27;男&#x27; &amp;&amp; age between 20 and 40 &amp;&amp; name like &#x27;___&#x27;;</span><br><span class="line"></span><br><span class="line">select gender,count(*) from employee where age &lt; 60 group by gender;</span><br><span class="line"></span><br><span class="line">select name,age,entrydate from employee where age &lt;= 35 order by age asc ,entrydate desc ;</span><br><span class="line"></span><br><span class="line">select  name,age,entrydate from employee where age between 20 and 40 and gender = &#x27;男&#x27; order by age, entrydate limit 0,5</span><br></pre></td></tr></table></figure><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ol><li><strong>FROM 子句</strong>：首先，你需要确定从哪个数据表或数据源中检索数据。这是通过在SQL查询中使用 <code>FROM</code> 子句来实现的。<code>FROM</code> 子句指定了数据的来源，可以是一个表、多个表的联接、子查询或其他数据源。</li><li><strong>WHERE 子句</strong>：一旦你确定了数据来源，接下来你可以使用 <code>WHERE</code> 子句来指定筛选条件。这允许你限制结果集以仅包括符合特定条件的行。条件可以包括等于、不等于、大于、小于、逻辑运算符等，用于筛选数据。</li><li><strong>GROUP BY 子句</strong>：如果你希望对查询结果进行分组汇总，可以使用 <code>GROUP BY</code> 子句。该子句将查询结果按照指定的列进行分组，以便进行聚合计算，例如计算每个分组的总数、平均值等。</li><li><strong>HAVING 子句</strong>：在使用 <code>GROUP BY</code> 子句分组后，你可以使用 <code>HAVING</code> 子句来指定对分组后的结果集应用的筛选条件。这允许你筛选出满足特定条件的分组。</li><li><strong>SELECT 子句</strong>：在确定了数据来源、筛选条件、分组和聚合后，你可以使用 <code>SELECT</code> 子句来指定要返回的列或计算的表达式。这是你最终查询所需数据的地方。</li><li><strong>ORDER BY 子句</strong>：如果你希望对查询结果进行排序，可以使用 <code>ORDER BY</code> 子句。它允许你按照指定的列对结果集进行升序或降序排序。</li><li><strong>LIMIT 子句</strong>：最后，你可以使用 <code>LIMIT</code> 子句来限制返回的结果集的行数。这对于分页查询或限制结果集大小很有用。</li></ol><p>所以，DQL查询的一般过程是：**<font color="red">从数据源中选择数据（FROM） -&gt; 筛选数据（WHERE） -&gt; 分组和聚合（GROUP BY 和 HAVING） -&gt; 选择返回的列或计算（SELECT） -&gt; 排序结果（ORDER BY） -&gt; 限制结果集大小（LIMIT）</font>**</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p><strong>查询用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select * from user;</span><br></pre></td></tr></table></figure><p><strong>创建用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create usesr &#x27;用户名&#x27;@&#x27;主机名&#x27; identified by &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><ol><li><p><font color="red"><strong>只能够在当前主机访问数据库：主机名填写为</strong></font><strong>localhost访问</strong></p></li><li><p><font color="red"><strong>可以在任意主机访问该数据库：主机名填写为</strong></font><strong>%</strong></p></li></ol><p><strong>修改用户密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified with mysql_native_password by &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><p><strong>删除用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;congyun&#x27;@&quot;%&quot;  identified by &quot;123456&quot;;</span><br><span class="line">select User from mysql.user;</span><br><span class="line"></span><br><span class="line">alter user &#x27;congyun&#x27;@&quot;%&quot; identified with mysql_native_password by &quot;123&quot;;</span><br><span class="line">drop user &#x27;congyun&#x27;@&quot;%&quot;;</span><br></pre></td></tr></table></figure><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>MySQL中定义了很多种权限，但是常用的就以下几种7</p><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">all，all privileges</td><td align="center">所有权限</td></tr><tr><td align="center">select</td><td align="center">查询数据</td></tr><tr><td align="center">insert</td><td align="center">插入数据</td></tr><tr><td align="center">update</td><td align="center">更新数据</td></tr><tr><td align="center">delete</td><td align="center">删除数据</td></tr><tr><td align="center">alter</td><td align="center">修改数据</td></tr><tr><td align="center">drop</td><td align="center">删除数据库&#x2F;表&#x2F;视图</td></tr><tr><td align="center">create</td><td align="center">创建数据库&#x2F;表</td></tr></tbody></table><p><strong>查询权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p><strong>授予权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 数据库名.表名 to &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p><font color="red">*<em>注意：数据库名.</em> **</font>代表授予当前数据库的所有表的对应的权限</p><p><font color="red">*<em>注意：多个权限之间用逗号进行分隔</em> **</font></p><p><strong>撤销权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;congyun&#x27;@&quot;%&quot;;</span><br><span class="line">grant select on test.* to &#x27;congyun&#x27;@&quot;%&quot;;</span><br><span class="line">show grants for &#x27;congyun&#x27;@&quot;%&quot;;</span><br><span class="line"></span><br><span class="line">revoke select on test.* from &#x27;congyun&#x27;@&quot;%&quot;;</span><br><span class="line">show grants for &#x27;congyun&#x27;@&quot;%&quot;;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数是指一段可以直接被另外一段程序调用的程序或者代码</strong></p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th align="center"><strong>函数</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">concat(s1,s2,……,sn)</td><td align="center">字符串拼接，将s1,s2,……,sn拼接为一个字符串</td></tr><tr><td align="center">lower(str)</td><td align="center">将字符串转为小写</td></tr><tr><td align="center">upper(str)</td><td align="center">将字符串转为大写</td></tr><tr><td align="center">lpad(str,n,pad)</td><td align="center">左填充，用字符串<strong>pad</strong>对str的左边进行填充，达到<strong>n</strong>个字符串长度</td></tr><tr><td align="center">rpad(str,n,pad)</td><td align="center">右填充，用字符串<strong>pad</strong>对str的右边进行填充，达到<strong>n</strong>个字符串长度</td></tr><tr><td align="center">trim(str)</td><td align="center">去掉字符串<strong>头部和尾部</strong>的空格</td></tr><tr><td align="center">substring(str,start,len)</td><td align="center">返回从字符串str从<strong>start位置起的len个长度</strong>的字符串</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 函数();</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1. 由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。比如: 1号员工的工号应该为00001</span><br><span class="line">update employee set workno = lpad(workno,5,&#x27;0&#x27;);</span><br><span class="line">select workno from employee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th align="center"><strong>函数</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">ceil(x)</td><td align="center">向上取整</td></tr><tr><td align="center">floor(x)</td><td align="center">向下取整</td></tr><tr><td align="center">mod(x,y)</td><td align="center">返回x&#x2F;y的模</td></tr><tr><td align="center">rand()</td><td align="center">返回0~1内的随机数</td></tr><tr><td align="center">round(x,y)</td><td align="center">求参数x四舍五入的值，保留y位小数</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 函数();</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 2. 通过数据库的函数，生成一个六位数的随机验证码。</span><br><span class="line"></span><br><span class="line">select floor(rand()*900000 + 100000) as 6位随机数;</span><br></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table><thead><tr><th align="center"><strong>函数</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">curdate()</td><td align="center">返回当前日期</td></tr><tr><td align="center">curtime()</td><td align="center">返回当前时间</td></tr><tr><td align="center">now()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">year(date)</td><td align="center">获取指定date的年份</td></tr><tr><td align="center">month(date)</td><td align="center">获取指定date的月份</td></tr><tr><td align="center">day(date)</td><td align="center">获取指定date的日期</td></tr><tr><td align="center">date_add(date,inter<strong>val</strong> expr type)</td><td align="center">返回一个<strong>日期&#x2F;时间值</strong>加上一个<strong>时间间隔expr</strong>后的时间值</td></tr><tr><td align="center">date<strong>diff</strong>(date1,date2)</td><td align="center">返回date1和date2之间的天数</td></tr></tbody></table><p><strong>date_add参数说明</strong></p><p><code>DATE_ADD()</code> 函数是MySQL中用于在日期或时间上执行加法操作的函数。它允许你将一段时间（间隔）添加到一个指定的日期或时间，并返回结果。以下是 <code>DATE_ADD()</code> 函数的参数说明：</p><ul><li><code>date</code>：要进行加法操作的日期或时间值。这可以是一个日期、时间或日期时间类型的列名或表达式。</li><li><code>expr</code>：要添加的时间间隔的数值。它可以是正数表示向未来添加时间，或负数表示向过去减去时间。</li><li><code>type</code>：表示时间间隔的类型，可以是以下之一：<ul><li><code>MICROSECOND</code>：微秒</li><li><code>SECOND</code>：秒</li><li><code>MINUTE</code>：分钟</li><li><code>HOUR</code>：小时</li><li><code>DAY</code>：天</li><li><code>WEEK</code>：周</li><li><code>MONTH</code>：月</li><li><code>QUARTER</code>：季度</li><li><code>YEAR</code>：年</li></ul></li></ul><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select date_add(now(),interval 70 day );</span><br><span class="line"></span><br><span class="line"># 3. 查询所有员工的入职天数，并根据入职天数倒序排序。</span><br><span class="line">select name,datediff(now(),entrydate) as tmp from employee order by tmp desc;</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table><thead><tr><th align="center"><strong>函数</strong></th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">if(value,‘true’,‘false’)</td><td align="center">如果value为true，返回字符串true<br>否则返回字符串false</td></tr><tr><td align="center">ifnull(value1,value2)</td><td align="center">如果value1不为空，返回value1<br>否则返回value2</td></tr><tr><td align="center">case when [val1] then [res1] … else [default] end</td><td align="center">如果val1为true，返回res1,…<br>否则返回default默认值</td></tr><tr><td align="center">case [expr] when [val1] then [res1] … else [default] end</td><td align="center">如果expr的值等于val1，返回res1,…<br>否则返回default默认值</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1. 需求:查询emp表的员工姓名和工作地址〔北京/上海----&gt;一线城市，其他----〉二线城市)</span><br><span class="line">select name,</span><br><span class="line">       case workaddress when &#x27;北京&#x27; then &#x27;一线城市&#x27; when &#x27;上海&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>概念</strong>：约束是作用于表中字段上的规则，用于<strong>限制存储在表中的数据</strong></p><p><strong>目的</strong>：保证数据库中数据的<strong>正确性、有效性和完整性</strong></p><p><strong>分类</strong></p><table><thead><tr><th align="center"><strong>约束</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>关键字</strong></th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据<strong>不能够为null</strong></td><td align="center">not null</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是<strong>唯一、不重复的</strong></td><td align="center">unique</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的<strong>唯一表示，要求非空且唯一</strong></td><td align="center">primary key</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">default</td></tr><tr><td align="center">检查约束</td><td align="center">保证字段值<strong>满足某一个条件</strong></td><td align="center">check</td></tr><tr><td align="center">外键约束</td><td align="center">用来让<strong>两张表的数据之间建立连接</strong>，保证数据的一致性和完整性</td><td align="center">foreign key</td></tr></tbody></table><p><strong><font color="red">注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束</font></strong></p><h3 id="约束演示"><a href="#约束演示" class="headerlink" title="约束演示"></a>约束演示</h3><table><thead><tr><th align="center"><strong>字段名</strong></th><th align="center"><strong>字段含义</strong></th><th align="center"><strong>字段类型</strong></th><th align="center"><strong>约束条件</strong></th><th align="center"><strong>约束关键字</strong></th></tr></thead><tbody><tr><td align="center">id</td><td align="center">ID唯一标识符</td><td align="center">int</td><td align="center">主键且自动增长</td><td align="center">primary key,auto_increment</td></tr><tr><td align="center">name</td><td align="center">姓名</td><td align="center">varchar(20)</td><td align="center">不为空，唯一</td><td align="center">not null,unique</td></tr><tr><td align="center">age</td><td align="center">年龄</td><td align="center">int</td><td align="center">大于0且小于120</td><td align="center">check</td></tr><tr><td align="center">status</td><td align="center">状态</td><td align="center">char(1)</td><td align="center">如果没有指定值，默认为1</td><td align="center">default</td></tr><tr><td align="center">gender</td><td align="center">性别</td><td align="center">char(1)</td><td align="center">无</td><td align="center">无</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists user;</span><br><span class="line">create table user(</span><br><span class="line">    id int primary key auto_increment  COMMENT  &quot;ID唯一标识符&quot;,</span><br><span class="line">    name varchar(20) not null unique  COMMENT  &quot;姓名&quot;,</span><br><span class="line">    age int COMMENT  &quot;年龄&quot; check ( age &gt; 0 &amp;&amp; user.age &lt; 120 ) ,</span><br><span class="line">    status char(1) default &#x27;1&#x27;  COMMENT  &quot;状态&quot;,</span><br><span class="line">    gender char(1)  COMMENT  &quot;性别&quot;</span><br><span class="line">)comment &quot;用户表&quot;;</span><br></pre></td></tr></table></figure><p><strong><font color="red">注意：在含有check关键字的SQL语句中的comment字段写在check字段之前</font></strong></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p><strong>概念：</strong>用于让两张表的数据之间建立连接，从而保证数据的一致性和完整性</p><p><strong>子表：</strong>拥有外键的表</p><p><strong>父表：</strong>拥有主键属性字段的表</p><p>“<strong>拥有外键的表</strong>“ 指的是在数据库中的一张表，其中包含了一个或多个列，这些<strong>列用来存储与其他表的数据关系</strong>，<strong>通常是其他表的主键</strong>。这种外键关系<strong>建立了不同表之间的连接</strong>，允许在查询和操作数据时进行关联，确保数据的一致性和完整性。在数据库中，这些外键列的值是从其他表的主键列中引用的，这样可以实现表之间的关联和数据的一致性维护。</p><p><strong>外键关联：</strong>子表通过外键与父表的主键建立关联，这种关联关系通常用于维护数据的完整性和一致性，以确保子表中的数据与父表中的数据保持一致。它允许我们在子表中引用父表的数据以及执行关联操作，如级联更新或级联删除等。</p><h4 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a><strong>添加外键</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ......</span><br><span class="line">   [constraint] [外键名称] foreign key (外键字段) reference 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alter table 表名 add constraint 外键名称 foreign key(外键字段名) reference 主表(主表列名);</span><br></pre></td></tr></table></figure><p><strong>删除外键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">id int auto_increment comment &#x27;ID&#x27; primary key,</span><br><span class="line">    name varchar(50) not null comment &#x27;部门名称&#x27;</span><br><span class="line">)comment &#x27;部门表&#x27;;</span><br><span class="line"></span><br><span class="line">INSERT INTO dept (id，name) VALUES (1，&#x27;研发部&#x27;),(2，&#x27;市场部&#x27;),(3，&#x27;财务部&#x27;),(4，&#x27;销售部&#x27;),(5，&#x27;总经办&#x27;);</span><br><span class="line"></span><br><span class="line">create table emp(</span><br><span class="line">id int auto_increment comment &#x27;ID&#x27; primary key,</span><br><span class="line">    name varchar(50) not null comment &#x27;姓名&#x27;,</span><br><span class="line">ageint comment &#x27;年龄&#x27;,</span><br><span class="line">job varchar(20) comment &#x27;职位&#x27;,</span><br><span class="line">    salary int comment &#x27;薪资&#x27;,</span><br><span class="line">entrydate date comment &#x27;入职时间&#x27;,</span><br><span class="line">    managerid int comment &#x27;直属领导ID&#x27;,</span><br><span class="line">    dept_id int comment &#x27;部门ID&#x27;</span><br><span class="line">)comment &#x27;员工表&#x27;;</span><br><span class="line"></span><br><span class="line">INSERT INTO emp (id, name, age, job, salary, entrydate, managerid, dept_id)  VALUES</span><br><span class="line">(1,&#x27;金庸&#x27;,66,&#x27;总裁&#x27;,20000,&#x27;2000-01-01&#x27;,null,5),</span><br><span class="line">(2,&#x27;张无忌&#x27;,20,&#x27;项目经理&#x27;,12500,&#x27;2005-12-05&#x27;,1,1),</span><br><span class="line">(3,&#x27;杨逍&#x27;,33,&#x27;开发&#x27;,8400,&#x27;2000-11-03&#x27;,2,1),</span><br><span class="line">(4,&#x27;韦一笑&#x27;,48,&#x27;开发&#x27;,11000,&#x27;2002-02-05&#x27;,2,1),</span><br><span class="line">(5,&#x27;常遇春&#x27;,43,&#x27;开发&#x27;,10500,&#x27;2004-09-07&#x27;,3,1),</span><br><span class="line">(6,&#x27;小昭&#x27;,19,&#x27;程序员鼓励师&#x27; ,6600,&#x27;2004-10-12&#x27;,2,1);</span><br><span class="line"></span><br><span class="line"># 添加主键</span><br><span class="line">alter table emp add constraint out_dept_id foreign key (dept_id) references dept(id);</span><br><span class="line"></span><br><span class="line">delete from dept where id = 1;</span><br><span class="line"># 尝试删除主表的数据时报错</span><br><span class="line">[23000][1451] Cannot delete or update a parent row: a foreign key constraint fails (`test`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`dept_id`) REFERENCES `dept` (`id`))</span><br><span class="line"></span><br><span class="line"># 删除主键</span><br><span class="line">alter table emp</span><br><span class="line">    drop foreign key out_dept_id;</span><br></pre></td></tr></table></figure><h4 id="删除更新外键"><a href="#删除更新外键" class="headerlink" title="删除更新外键"></a>删除更新外键</h4><table><thead><tr><th align="center"><strong>行为</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">no action</td><td align="center">当在父表中<strong>删除&#x2F;更新</strong>对应记录时，首先检查该记录是否有对应外键<br><strong>如果有则不允许删除&#x2F;更新（与restrict一致）</strong></td></tr><tr><td align="center">restrict</td><td align="center">当在父表中<strong>删除&#x2F;更新</strong>对应记录时，首先检查该记录是否有对应外键<br><strong>如果有则不允许删除&#x2F;更新（与restrict一致）</strong></td></tr><tr><td align="center">cascade</td><td align="center">当在父表中<strong>删除&#x2F;更新</strong>对应记录时，首先检查该记录是否有对应外键<br><strong>如果有，则也删除&#x2F;更新外键在子表中的记录</strong></td></tr><tr><td align="center">set null</td><td align="center">当在父表中<strong>删除</strong>对应记录时，首先检查记录是否存在对应外键<br><strong>如果存在，则设置子表中改外键的值为null（这就要求外键允许取null）</strong></td></tr><tr><td align="center">set default</td><td align="center">父表<strong>有变更</strong>的时候，子表将外键列设置为一个默认的值（<strong>Innodb不支持</strong>）</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 </span><br><span class="line">add constraint 外键名称 </span><br><span class="line">foreign key(外键字段名) reference 主表(主表列名)</span><br><span class="line">on update cascade </span><br><span class="line">on delete cascade;</span><br></pre></td></tr></table></figure><ol><li><strong>no action</strong>: 当在父表中删除或更新对应记录时，首先检查该记录是否有对应外键，如果有外键关联，就不允许删除或更新，这与”restrict”的行为是一致的。</li><li><strong>restrict</strong>: 同样，当在父表中删除或更新对应记录时，首先检查该记录是否有对应外键，如果有外键关联，就不允许删除或更新。</li></ol><p>实际上，这两个选项的描述方式<strong>只是为了提供不同的语法，以满足不同人的偏好</strong>。它们在功能上是相同的，都用于防止删除或更新父表中的记录，如果存在与子表的外键关联。所以，在实际使用中，你可以选择其中一个，它们会产生相同的效果。</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><p>在项目开发时，在设计数据库表结构的时候，会根据业务需求以及业务模块之间的关系，分析并设计表结构。由于业务之间存在相互关联，所以各个表结构之间也存在各种联系，基本上分为三种：<strong>一对多、多对多、一对一</strong></p><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p><strong>定义：</strong>一对多描述的是两个实体（表）之间的关系，其中一个实体的一个记录可以关联到另外一个实例中的多个记录</p><p><font color="red"><strong>一对多关系通常通过外键来建立和维护</strong></font></p><p><strong>示例：</strong>两个实体表：员工表(emp)和部门表(dept)</p><ul><li>dept：在该表中id中每个记录代表一个部门，每个部门有一个唯一的部门id作为主键</li><li>emp：在该表中id中每个记录代表一个员工，一个员工有一个唯一的员工id作为主键</li><li>为了建立一对多关系，通常在emp表中添加一个外键，该外键引用dept表中的部门id，表示每个员工与一个部门相关联，将其命名为dept_id</li></ul><p>在上述示例中，一个部门在dept表中可以拥有唯一的部门id，并且可以与多个员工相互关联，但是一个员工只能与一个部门相互关联</p><p><strong>本质：</strong>一个实体的记录可以关联到另一个实体的多个记录，而另一个实体的记录只能关联到一个记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists dept;</span><br><span class="line">create table dept(</span><br><span class="line">id int auto_increment comment &#x27;ID&#x27; primary key,</span><br><span class="line">    name varchar(50) character set utf8 not null comment &#x27;部门名称&#x27;</span><br><span class="line">)comment &#x27;部门表&#x27;;</span><br><span class="line"></span><br><span class="line">INSERT INTO dept(id, name) VALUES (1,&#x27;研发部&#x27;),(2,&#x27;市场部&#x27;),(3,&#x27;财务部&#x27;),(4,&#x27;销售部&#x27;),(5,&#x27;总经办&#x27;);</span><br><span class="line"></span><br><span class="line">create table emp(</span><br><span class="line">id int auto_increment comment &#x27;ID&#x27; primary key,</span><br><span class="line">    name varchar(50) not null comment &#x27;姓名&#x27;,</span><br><span class="line">age int comment &#x27;年龄&#x27;,</span><br><span class="line">job varchar(20) comment &#x27;职位&#x27;,</span><br><span class="line">    salary int comment &#x27;薪资&#x27;,</span><br><span class="line">entrydate date comment &#x27;入职时间&#x27;,</span><br><span class="line">    managerid int comment &#x27;直属领导ID&#x27;,</span><br><span class="line">    dept_id int comment &#x27;部门ID&#x27;</span><br><span class="line">)comment &#x27;员工表&#x27;;</span><br><span class="line"></span><br><span class="line">INSERT INTO emp (id, name, age, job, salary, entrydate, managerid, dept_id) VALUES</span><br><span class="line">(1,&#x27;金庸&#x27;,66,&#x27;总裁&#x27;,20000,&#x27;2000-01-01&#x27;,null,5),</span><br><span class="line">(2,&#x27;张无忌&#x27;,20,&#x27;项目经理&#x27;,12500,&#x27;2005-12-05&#x27;,1,1),</span><br><span class="line">(3,&#x27;杨逍&#x27;,33,&#x27;开发&#x27;,8400,&#x27;2000-11-03&#x27;,2,1),</span><br><span class="line">(4,&#x27;韦一笑&#x27;,48,&#x27;开发&#x27;,11000,&#x27;2002-02-05&#x27;,2,1),</span><br><span class="line">(5,&#x27;常遇春&#x27;,43,&#x27;开发&#x27;,10500,&#x27;2004-09-07&#x27;,3,1),</span><br><span class="line">(6,&#x27;小昭&#x27;,19,&#x27;程序员鼓励师&#x27; ,6600,&#x27;2004-10-12&#x27;,2,1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alter table emp</span><br><span class="line">    add constraint dept_id</span><br><span class="line">    foreign key (dept_id)</span><br><span class="line">    references dept(id);</span><br></pre></td></tr></table></figure><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-09-27-c55324-1695824226.png" alt="image-20230927221706452"></p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p><strong>定义：</strong>描述两个表之间的关系，其中一个实体的<strong>多个记录</strong>可以<strong>关联</strong>到另外一个实体的<strong>多个记录</strong>，<font color="red">通常通过一个<strong>中间表</strong>来<strong>连接</strong>实现这种关系</font></p><p><strong>示例：</strong>考虑学生与所选课程的关系</p><ul><li>student：在该表中id中每个记录代表一个学生，每个学生有一个唯一的学生id作为主键</li><li>course：在该表中id中每个记录代表一个课程，一个课程有一个唯一的课程id作为主键</li><li>为了建立多对多关系，我们通常需要创建一个中间表（student_course），该表包含两个外键，一个用于引用student中的学生id，另外一个用于引用course中的课程id。<strong>这个中间表记录了学生与课程之间的多对多关系，每一个记录代表一个学生选择了一门课程</strong></li><li><font color="red"><strong>由于中间表的存在，每个学生可以和多个课程相互关联，每门课程也可以和多个学生相互关联</strong></font></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">    id int primary key auto_increment comment &quot;学生序列id&quot;,</span><br><span class="line">    name varchar(20) character set utf8 comment &#x27;学生姓名&#x27;,</span><br><span class="line">    student_number char(10) comment &quot;学生学号id&quot;</span><br><span class="line">) comment &#x27;学生表&#x27;;</span><br><span class="line"></span><br><span class="line">create table course(</span><br><span class="line">    id int primary key auto_increment comment &quot;课程序列id&quot;,</span><br><span class="line">    name varchar(20) character set utf8 comment &#x27;课程&#x27;</span><br><span class="line">) comment &#x27;课程表&#x27;;</span><br><span class="line"></span><br><span class="line">create table student_course(</span><br><span class="line">    id int primary key auto_increment comment &#x27;课程关系表序列号&#x27;,</span><br><span class="line">    student_id int comment &quot;学生序列id&quot;,</span><br><span class="line">    course_id int comment &quot;课程序列id&quot;,</span><br><span class="line">    constraint student_id foreign key (student_id) references student(id),</span><br><span class="line">    constraint course_id foreign key (course_id) references course(id)</span><br><span class="line">) comment &#x27;学生课程关系表&#x27;;</span><br><span class="line"></span><br><span class="line">insert into student(name, student_number)</span><br><span class="line">    values</span><br><span class="line">        (&quot;黛绮丝&quot;,&quot;2000100101&quot;),</span><br><span class="line">        (&quot;谢逊&quot;,&quot;2000100102&quot;),</span><br><span class="line">        (&quot;殷正天&quot;,&quot;2000100103&quot;),</span><br><span class="line">        (&quot;韦一笑&quot;,&quot;2000100104&quot;);</span><br><span class="line"></span><br><span class="line">insert into course(name) values (&quot;java&quot;),(&quot;PHP&quot;),(&quot;MySQL&quot;),(&quot;Hadoop&quot;);</span><br><span class="line"></span><br><span class="line">insert into student_course(student_id, course_id) VALUES (1,1),(1,2),(1,3),(2,2),(2,4);</span><br></pre></td></tr></table></figure><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-09-27-f5cc85-1695823784.png" alt="image-20230927220944075"></p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>一对一关系是数据库模型中的一种关系，它表示两个实体（表）之间的关系，其中一个实体的每个记录可以与另一个实体的一个记录相关联，反之亦然。这种关系通常通过共享相同的主键来建立。</p><p>举个例子来说明一对一关系：考虑一个数据库中有两个实体（表）：员工表（Employees）和工作证表（EmployeeIDs）。</p><ul><li>员工表（Employees）中的每个记录代表一名员工，每个员工有一个唯一的员工ID作为主键。</li><li>工作证表（EmployeeIDs）中的每个记录代表一张工作证，每张工作证也有一个唯一的员工ID作为主键。这个员工ID在工作证表中同时也是外键，与员工表的员工ID关联起来。</li></ul><p>在这个示例中，每名员工只有一张工作证，每张工作证也只属于一名员工，这就是一对一关系的特点。这种关系通常用于存储与某个实体相关的补充信息，以确保每个记录之间的一对一对应关系。一对一关系的应用场景可能包括员工与工作证、用户与身份证等，其中每个实体的记录与另一个实体的记录一一对应。</p><p>当需要创建一对一关系时，通常可以使用以下SQL代码作为示例：</p><p>假设我们有两个表：<code>Employees</code> 和 <code>EmployeeIDs</code>。 <code>Employees</code> 表包含员工的基本信息，而 <code>EmployeeIDs</code> 表包含与每名员工相关的工作证信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees (</span><br><span class="line">    employee_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    first_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    last_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    hire_date <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建工作证表，注意外键引用了员工表的主键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EmployeeIDs (</span><br><span class="line">    employee_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    id_number <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    expiration_date <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (employee_id) <span class="keyword">REFERENCES</span> Employees(employee_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面的SQL代码示例中，我们首先创建了 <code>Employees</code> 表和 <code>EmployeeIDs</code> 表。然后，我们在 <code>EmployeeIDs</code> 表中创建了一个外键（<code>employee_id</code>），它引用了 <code>Employees</code> 表的主键，这样就建立了一对一关系。</p><p>这个示例演示了如何在SQL中创建一对一关系，并确保每个员工只有一个工作证，每张工作证也只属于一个员工。</p><h3 id="多表查询概念"><a href="#多表查询概念" class="headerlink" title="多表查询概念"></a>多表查询概念</h3><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><h3 id="多表查询案例"><a href="#多表查询案例" class="headerlink" title="多表查询案例"></a>多表查询案例</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL数据库&quot;&gt;&lt;a href=&quot;#MySQL数据库&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库&quot;&gt;&lt;/a&gt;MySQL数据库&lt;/h1&gt;&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://example.com/posts/6b3e1469/"/>
    <id>http://example.com/posts/6b3e1469/</id>
    <published>2023-09-13T14:00:00.000Z</published>
    <updated>2023-09-21T15:08:01.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><h3 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h3><ol><li>spring是一个开源的<strong>轻量级Java开发应用框架</strong>，可以<strong>简化企业级应用开发</strong></li><li>Spring解决了开发者在JavaEE开发中遇到的许多常见的问题，提供了功能强大<strong>IOC、AOP及Web MVC</strong>等功能</li><li>Spring的<strong>生态完善</strong>，不管是Spring哪个领域的解决方案都是依附于在Spring Framework基础框架的。</li></ol><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ol><li><strong>Data Access</strong>：数据访问</li><li><strong>Data Integration</strong>：数据集成</li><li><strong>web</strong>: web开发</li><li><strong>AOP</strong>：面向切面编程</li><li><strong>Aspects</strong>：AOP思想实现</li><li><strong>Core Container</strong>：核心容器</li></ol><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-09-13-ca8f3e-1694613941.jpeg" alt="img"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="maven的seting-xml配置文件"><a href="#maven的seting-xml配置文件" class="headerlink" title="maven的seting.xml配置文件"></a>maven的seting.xml配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>uk<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>CN<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSChina Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>internal nexus repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="BeanFactory的开发流程"><a href="#BeanFactory的开发流程" class="headerlink" title="BeanFactory的开发流程"></a>BeanFactory的开发流程</h4><p> <img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-09-13-06ce2f-1694614330.png" alt="BeanFactory的开发流程"></p><ol><li>导入Spring的jar包或Maven坐标</li><li>定义<strong>Service接口</strong>及其<strong>Servicelmpl实现类</strong></li><li>创建beans.xml配置文件，将<strong>Servicelmpl</strong>的信息<strong>配置到xml</strong>中</li><li>编写<strong>测试代码</strong>，创建BeanFactory，加载配置文件，获取Service实例对象。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;h2 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>关于资产管理系统的学习</title>
    <link href="http://example.com/posts/462759b7/"/>
    <id>http://example.com/posts/462759b7/</id>
    <published>2023-09-10T17:22:54.000Z</published>
    <updated>2023-09-13T13:55:20.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于资产管理系统的学习"><a href="#关于资产管理系统的学习" class="headerlink" title="关于资产管理系统的学习"></a>关于资产管理系统的学习</h1><p>实话说，我第一眼看到这个项目的时候，我看了一眼readme，当时很是无语，谁家的readme这么写，就这么一点点内容，表示还不如不写</p><h2 id="搭建资产管理系统的环境中遇到的问题"><a href="#搭建资产管理系统的环境中遇到的问题" class="headerlink" title="搭建资产管理系统的环境中遇到的问题"></a>搭建资产管理系统的环境中遇到的问题</h2><h3 id="tomcat服务器的搭建"><a href="#tomcat服务器的搭建" class="headerlink" title="tomcat服务器的搭建"></a>tomcat服务器的搭建</h3><p>由于没有自己在windows上自己手动搭建过tomcat服务，所以一开始以为这个会很难，所有选择直接拉取docker中的容器，在这个过程中遇到了一些问题，到最后也没有解决，故而放弃转在windows中进行部署</p><p>以下为在拉取docker中的容器中遇到的一些问题</p><h4 id="docker内tomcat容器启动成功后，无法访问tomcat页面-404-问题"><a href="#docker内tomcat容器启动成功后，无法访问tomcat页面-404-问题" class="headerlink" title="docker内tomcat容器启动成功后，无法访问tomcat页面(404)问题"></a><strong>docker内tomcat容器启动成功后，无法访问tomcat页面(404)问题</strong></h4><p>原因：这个是由于webapps目录下没有资源文件，因此无法访问</p><p>解决方案：</p><ol><li><p>强制删除webapps</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf webapps</span><br></pre></td></tr></table></figure></li><li><p>将webapps.dist当做新的webapps文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure></li></ol><p>在执行上述步骤之后，就可以正确访问web，但是可能是由于容器本身的原因，在登录容器之后出现了**<font color="red">“bash-4.2#</font>**的问题，一开始没有意识到这是一个错误，因此一直在反复的删除重启容器，后来突然想着搜一下，结果发现这个并不是我一个人会遇到的问题，于是针对上述问题进行了查找，并找到了解决方案</p><h4 id="docker出现”bash-4-2-”"><a href="#docker出现”bash-4-2-”" class="headerlink" title="docker出现”bash-4.2#”"></a><strong>docker出现”bash-4.2#”</strong></h4><p>用户目录下的几个配置文件丢失，丢失文件如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> .bash<span class="emphasis">_profile</span></span><br><span class="line"><span class="emphasis">2. .bashrc</span></span><br></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/skel/.bashrc /root/</span><br><span class="line">cp /etc/skel/.bash<span class="emphasis">_profile  /root/</span></span><br><span class="line"><span class="emphasis">bash</span></span><br></pre></td></tr></table></figure><p>在解决上述问题之后，我开始尝试对上述文件进行修改，但是在强制删除webapps的时候出现了<strong>由于文件正在被占用无法删除的问题</strong>，于是我试着将文件映射到本地，然后进行删除，结果出现了<code>docker中的文件映射本地失败</code>的问题，但是我不理解，我明明是按照对应的参数进行映射的，但是本地文件夹中没有出现对应的文件，我其实也不知道是不是应该要有文件出现，因为我关于docker的学习也只是简单涉猎了一下，并没有做过系统性的学习。这个问题我到最后也没有解决</p><p>但是在今天写博客的时候，突然意识到我是不是可以直接复制一份文件过去，但是我现在不太想再拉一次，主要是昨天好像把本地docker给搞死机了，我不想重启电脑了，所以等下次遇到这个样子的问题后再尝试这个方法可不可以</p><p>由于在docker中部署失败了，于是我不得不将这个装到我的电脑里面，其实就我本心而言，我不太想将这个装到我的电脑上面，但是没办法，结果最后一看，不如直接装到电脑上，还浪费了我那么多时间</p><p>关于Windows上搭建Tomcat服务器并部署项目，可以参考<a href="https://blog.csdn.net/HongEnIT/article/details/80726826">该博客</a></p><h3 id="配置启动资产管理系统的环境"><a href="#配置启动资产管理系统的环境" class="headerlink" title="配置启动资产管理系统的环境"></a>配置启动资产管理系统的环境</h3><p>实话说，虽然我经常有用tomcat服务，但是我实际上是第一次启动一个别人的web项目，而且咋说呢？我是真的没有接触过关于war包类型的项目，所以我在开头的时候，比较迷茫，不知道应该怎么做，于是开始搜视频，但是又耐不下性子看，于是还是拖了1天，才认认真真的看的</p><p>我是通过观看<a href="https://www.bilibili.com/video/BV1Bh411z7fk/?share_source=copy_web&vd_source=0d052b8ae83199bd7c603b8817167402">idea配置Tomcat服务器</a>这个视频，逐步配置相关环境的，当然在这个过程中也遇到了一些问题，以下是观看视频时我遇到的一些问题</p><h4 id="警报：所选目录不是有效的tomcat的主页"><a href="#警报：所选目录不是有效的tomcat的主页" class="headerlink" title="警报：所选目录不是有效的tomcat的主页"></a>警报：所选目录不是有效的tomcat的主页</h4><p>这个问题算是一个比较低级的错误，在编辑tomcat的配置文件的时候好像是因为少打了一个<strong>\</strong>，然后就出现了<font color="red"><strong>警报：所选目录不是有效的tomcat的主页</strong></font>，我当时比较懵逼，我不理解，为什么选择一个目录还会出问题，然后我看了<a href="https://blog.csdn.net/weixin_70607365/article/details/127028810">这个博客</a>，虽然好像也没啥大用，但是这个里面有我遇到的一个具体问题，但是并没有解决，然后我试着胡改，突然在加了<strong>\</strong>之后就好了，实话是我很不理解</p><h4 id="关于IDEA配置本地tomcat部署项目找不到项目工件"><a href="#关于IDEA配置本地tomcat部署项目找不到项目工件" class="headerlink" title="关于IDEA配置本地tomcat部署项目找不到项目工件"></a>关于IDEA配置本地tomcat部署项目找不到项目工件</h4><p>因为我是第一次接触关于war的项目的部署到tomcat上面，而且我不喜欢用英文，所以我完全一头懵逼，而且我当前使用的IDEA与视频里面的有所不同，部分配置界面还是不太清楚功能，于是通过一下博客<a href="https://blog.csdn.net/yang2330648064/article/details/128702108">关于IDEA配置本地tomcat部署项目找不到项目工件</a>对我本地的项目进行部署，通过上述过程结合视频，完成了项目的启动，但是很不幸，在启动的过程中又遇到了问题，我不理解咋能有那么多问题</p><h4 id="java-无法访问javax-servlet-Filter-找不到javax-servlet-Filter的类文件"><a href="#java-无法访问javax-servlet-Filter-找不到javax-servlet-Filter的类文件" class="headerlink" title="java: 无法访问javax.servlet.Filter 找不到javax.servlet.Filter的类文件"></a>java: 无法访问javax.servlet.Filter 找不到javax.servlet.Filter的类文件</h4><p>这个问题我搜了一下主要是缺少相关的jar包，我想了想，我不知道为啥想到了maven，然后试着写了pom配置文件，很不幸，写完加载文件的时候，电脑卡死了，字面意义上的卡死了，然后等了好久，重启了好几次IDEA。但是我在加载完之后，突然又懵逼了，我应该如何将这个关联到项目里面，主要是我也不熟悉这个项目，一说把这个放进去，我头已经大了。</p><p>然后，想了想，这个文件既然能在生产环境运行，那么肯定是不缺jar包的，所以把所有能引用<strong>WebContent&#x2F;WEB-INF&#x2F;lib</strong>文件的地方都加了这个文件，然后就解决了这个问题，我感觉也很神奇，但是我不想纠结这个究竟是那个配置的功劳，主要是我忘了我配置了哪些地方</p><h4 id="java-无效的源发行版-20"><a href="#java-无效的源发行版-20" class="headerlink" title="java: 无效的源发行版: 20"></a>java: 无效的源发行版: 20</h4><p>原因：编译的JDK版本与发布版本不一致</p><p>解决方案：将项目中所有涉及jdk版本配置的地方进行了统一</p><p>参考博客：<a href="https://blog.csdn.net/qq_43362426/article/details/111370493">IDEA 报错，无效的源发行版 无效的目标发行版 解决方法_无效的目标发行版: 20</a></p><h4 id="日志输出乱码"><a href="#日志输出乱码" class="headerlink" title="日志输出乱码"></a>日志输出乱码</h4><p>在解决完上述问题之后，虽然还有一些问题，但是起码项目能动了，虽然我到现在都不止war包到底在哪，然后，我看着项目启动时<strong>日志的乱码问题</strong>，我头真的大了，咋到处都是问题，真的无语</p><p>解决方法：<strong>tomcat&#x2F;conf&#x2F;</strong> 目录下修改<strong>logging.properties</strong>文件中的内容，将所有的<strong>UTF-8替换为GBK</strong></p><h4 id="源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。"><a href="#源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。" class="headerlink" title="源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。"></a>源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。</h4><p>哎，在解决完上述问题之后，终于到了最关键的问题了，项目是启动了，但是好像不知道是不是挂载对了，然后没有相关的资源文件</p><h4 id="idea-配置html"><a href="#idea-配置html" class="headerlink" title="idea 配置html"></a>idea 配置html</h4><p>webContent项目</p><p>在最开始的时候尝试通过看B站视频来解决tomcat服务的搭建问题，是解决了一部分问题，项目是成功的部署到了tomcat服务当中，但是更关键的问题，在于下面的这个问题，无法访问源服务器中的网络资源</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP状态 404 - 未找到</span><br><span class="line">类型 状态报告</span><br><span class="line"></span><br><span class="line">描述 源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。</span><br><span class="line"></span><br><span class="line">Apache Tomcat/8.5.93</span><br></pre></td></tr></table></figure><p>后通过F12进行调试，发现并没有将对应的网络资源部署到tomcat服务当中，于是尝试着添加web资源的目录，由于是第一次接触这个方面的内容，错将**WebContent&#x2F;WEB-INF&#x2F;**中的内容当为资源路径，由此导致了上述问题，后通过查阅相关的资料，解决了上述问题，以下是我查阅的博客<a href="https://blog.csdn.net/qq_38635487/article/details/116192804">如何将web content项目导入idea并部署到tomcat_idea</a>，通过上述方式，解决了网络资源无法加载的问题。</p><p>同时又出现了新的问题，资源加载不全，<font color="red"><strong>这个在我后来看来大概率是因为资源路径不对</strong></font>，然后我通过查看这个博客<a href="https://blog.csdn.net/qq_42495847/article/details/105706900">【JavaWeb开发】“web应用程序的根目录“与“web站点的根目录“的分析_web应用的根目录</a>的<code>4.什么是虚拟目录？</code>这个部分，想到了通过查看对应的<strong>classes文件</strong>的目录结构，逐步确定网页的目录架构，最后在试到<strong>404.jsp</strong>自动跳转到了<strong>login</strong>的界面</p><h4 id="MySQL服务意外关停"><a href="#MySQL服务意外关停" class="headerlink" title="MySQL服务意外关停"></a>MySQL服务意外关停</h4><p>在webContent项目勉强有了思路的时候，在程序运行的时候，突然显示jdbc连接异常，然后尝试单独连接MySQL数据库，失败。登录服务器后发现对应的docker服务意外关停，重起后解决</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到此为止，基本算是完成了项目结构的基本摸索，在这个过程中，学习到了<strong>tomcat服务的搭建、关于web项目配置文件的编写以及资源文件结构的探索的基本思路</strong>，在此之后就需要对整个项目的运行结构进行分析</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="页面登录部分"><a href="#页面登录部分" class="headerlink" title="页面登录部分"></a>页面登录部分</h3><h4 id="密码存储存在问题"><a href="#密码存储存在问题" class="headerlink" title="密码存储存在问题"></a>密码存储存在问题</h4><ol><li>在密码的加密处理方面只采用了md5的验证，存在撞库风险</li><li>在注册用户时的密码复杂程度不够</li><li>采用的是DES对于关键信息的加密方式并不能很好的保障隐私数据的安全性</li></ol><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-09-13-561aae-1694609450.png" alt="image-20230913205041766"></p><p><img src="https://congyun-picture.oss-cn-hangzhou.aliyuncs.com/before/2023-09-13-b84c0e-1694609607.png" alt="image-20230913205327175"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于资产管理系统的学习&quot;&gt;&lt;a href=&quot;#关于资产管理系统的学习&quot; class=&quot;headerlink&quot; title=&quot;关于资产管理系统的学习&quot;&gt;&lt;/a&gt;关于资产管理系统的学习&lt;/h1&gt;&lt;p&gt;实话说，我第一眼看到这个项目的时候，我看了一眼readme，当时很是</summary>
      
    
    
    
    
    <category term="项目学习" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>web学习</title>
    <link href="http://example.com/posts/1ded100b/"/>
    <id>http://example.com/posts/1ded100b/</id>
    <published>2023-09-06T13:41:52.000Z</published>
    <updated>2023-09-13T13:59:36.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB学习"><a href="#WEB学习" class="headerlink" title="WEB学习"></a>WEB学习</h1><h2 id="VScode环境配置"><a href="#VScode环境配置" class="headerlink" title="VScode环境配置"></a>VScode环境配置</h2><p>在使用VScode学习前端的内容之前需要添加一些插件，方便代码的书写</p><p><code>安装的插件</code></p><table><thead><tr><th align="center"><strong>插件</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">Chinese (Simplified) (简体中文)</td><td align="center">此中文（简体）语言包为 VS Code 提供本地化界面</td></tr><tr><td align="center">Open in Browser</td><td align="center">右击选择浏览器打开html文件</td></tr><tr><td align="center">HTML-CSS-JS Prettify</td><td align="center">每次保存，自动格式话文件</td></tr><tr><td align="center">Auto Rename Tag</td><td align="center">自动重命名配对的HTML&#x2F; XML标签</td></tr><tr><td align="center">CSS Peek</td><td align="center">追踪至样式</td></tr></tbody></table><h3 id="WEB开发介绍"><a href="#WEB开发介绍" class="headerlink" title="WEB开发介绍"></a>WEB开发介绍</h3><p>Web：全球广域网，也称为<strong>万维网</strong>(www World wide web)，能够<strong>通过浏览器访问的网站</strong></p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h4><ol><li><strong>浏览器请求前端服务器</strong>：<ul><li>用户在浏览器中输入域名，向前端服务器发起请求</li></ul></li><li><strong>前端服务器响应</strong>：<ul><li>前端服务器接收请求并返回前端代码</li></ul></li><li><strong>浏览器渲染</strong>：<ul><li>浏览器解析前端代码，呈现对应的网页结构</li></ul></li><li><strong>访问后端Java程序</strong>：<ul><li>浏览器在解析网页时，发现需要获取相关数据</li><li>浏览器向后端的Java程序发送数据请求</li></ul></li><li><strong>后端程序连接数据库</strong>：<ul><li>后端程序访问数据库，执行必要的查询或操作</li></ul></li><li><strong>数据库响应</strong>：<ul><li>数据库响应后端Java程序的请求，返回数据</li></ul></li><li><strong>后端处理数据</strong>：<ul><li>后端Java程序对数据库返回的数据进行处理，可能包括业务逻辑的计算</li></ul></li><li><strong>后端返回数据给浏览器</strong>：<ul><li>后端Java程序将处理后的数据作为响应返回给浏览器</li></ul></li><li><strong>浏览器数据填充</strong>：<ul><li>浏览器接收后端程序返回的数据</li><li>浏览器将获得的数据填充到网页的对应位置，以呈现动态内容</li></ul></li></ol><h4 id="html、CSS"><a href="#html、CSS" class="headerlink" title="html、CSS"></a>html、CSS</h4><p><strong>HTML</strong> ( HyperText Markup Language)：超文本标记语言。</p><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容</p><p>标记语言：由标签构成的语言</p><ol><li>HTML标签都是<strong>预定义</strong>好的。例如:使用**&lt;a&gt;<strong>展示超链接，使用</strong>&lt;img&gt;<strong>展示图片，</strong>&lt;video&gt;**展示视频</li><li>HTML代码直接在浏览器中运行，HTML标签由浏览器解析</li></ol><p><strong>css</strong> (Cascading Style Sheet)︰层叠样式表，用于控制页面的样式（表现)</p><p>HTML结构标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            标题</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>html特点：</strong></p><ol><li>HTML标签不区分大小写</li><li>HTML标签属性值单双引号都可以</li><li>HTML语法松散</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WEB学习&quot;&gt;&lt;a href=&quot;#WEB学习&quot; class=&quot;headerlink&quot; title=&quot;WEB学习&quot;&gt;&lt;/a&gt;WEB学习&lt;/h1&gt;&lt;h2 id=&quot;VScode环境配置&quot;&gt;&lt;a href=&quot;#VScode环境配置&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="前端学习" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>大学总结</title>
    <link href="http://example.com/posts/bd434866/"/>
    <id>http://example.com/posts/bd434866/</id>
    <published>2023-09-06T13:27:34.000Z</published>
    <updated>2023-09-06T14:23:25.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大学总结"><a href="#大学总结" class="headerlink" title="大学总结"></a>大学总结</h1><h2 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大学总结&quot;&gt;&lt;a href=&quot;#大学总结&quot; class=&quot;headerlink&quot; title=&quot;大学总结&quot;&gt;&lt;/a&gt;大学总结&lt;/h1&gt;&lt;h2 id=&quot;大一&quot;&gt;&lt;a href=&quot;#大一&quot; class=&quot;headerlink&quot; title=&quot;大一&quot;&gt;&lt;/a&gt;大一&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络知识点复习</title>
    <link href="http://example.com/posts/59028/"/>
    <id>http://example.com/posts/59028/</id>
    <published>2023-08-31T01:42:36.000Z</published>
    <updated>2023-08-31T04:51:47.538Z</updated>
    
    <content type="html"><![CDATA[<p><code>哎，自从毕业之后就没怎么好好学习过，最近心血来潮突然想考证，就又开始了我的学习之旅！</code></p><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><img src="/posts/59028/2023-08-31-4b3a8a-1693449785.jpg" alt="2023-08-31-4b3a8a-1693449785"></p><p><img src="/posts/59028/2023-08-31-2778d8-1693449811.jpg" alt="2023-08-31-2778d8-1693449811"></p><p><img src="/posts/59028/2023-08-31-a80317-1693449833.jpg" alt="2023-08-31-a80317-1693449833"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;哎，自从毕业之后就没怎么好好学习过，最近心血来潮突然想考证，就又开始了我的学习之旅！&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h</summary>
      
    
    
    
    
  </entry>
  
</feed>
